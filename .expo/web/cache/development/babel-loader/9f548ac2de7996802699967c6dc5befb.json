{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PrimaryNavigator = PrimaryNavigator;\nexports.canExit = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _screens = require(\"../screens\");\n\nvar _bottomTabs = require(\"@react-navigation/bottom-tabs\");\n\nvar _vectorIcons = require(\"@expo/vector-icons\");\n\nvar _jsxFileName = \"/Users/isaacweber/code/SofamApp/app/navigation/primary-navigator.tsx\";\nvar Tab = (0, _bottomTabs.createBottomTabNavigator)();\n\nfunction PrimaryNavigator() {\n  return _react.default.createElement(Tab.Navigator, {\n    screenOptions: function screenOptions(_ref) {\n      var route = _ref.route;\n      return {\n        tabBarIcon: function tabBarIcon(_ref2) {\n          var color = _ref2.color,\n              size = _ref2.size;\n          var iconName;\n\n          if (route.name == 'home') {\n            iconName = 'home';\n          } else if (route.name == 'demo') {\n            iconName = 'plussquareo';\n          } else if (route.name == 'profile') {\n            iconName = 'user';\n          }\n\n          return _react.default.createElement(_vectorIcons.AntDesign, {\n            name: iconName,\n            size: size,\n            color: color,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 18\n            }\n          });\n        }\n      };\n    },\n    tabBarOptions: {\n      showLabel: false,\n      activeTintColor: 'tomato',\n      inactiveTintColor: 'gray'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(Tab.Screen, {\n    name: \"home\",\n    component: _screens.HomeScreen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }), _react.default.createElement(Tab.Screen, {\n    name: \"demo\",\n    component: _screens.DemoScreen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }), _react.default.createElement(Tab.Screen, {\n    name: \"profile\",\n    component: _screens.ProfileScreen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }));\n}\n\nvar exitRoutes = [\"welcome\"];\n\nvar canExit = function canExit(routeName) {\n  return exitRoutes.includes(routeName);\n};\n\nexports.canExit = canExit;","map":{"version":3,"sources":["/Users/isaacweber/code/SofamApp/app/navigation/primary-navigator.tsx"],"names":["Tab","PrimaryNavigator","route","tabBarIcon","color","size","iconName","name","showLabel","activeTintColor","inactiveTintColor","HomeScreen","DemoScreen","ProfileScreen","exitRoutes","canExit","routeName","includes"],"mappings":";;;;;;;;AAMA;;AAEA;;AACA;;AACA;;;AAoBA,IAAMA,GAAG,GAAG,2CAAZ;;AAGO,SAASC,gBAAT,GAA4B;AACjC,SACE,6BAAC,GAAD,CAAK,SAAL;AACE,IAAA,aAAa,EAAE;AAAA,UAAGC,KAAH,QAAGA,KAAH;AAAA,aAAgB;AAC7BC,QAAAA,UAAU,EAAE,2BAAqB;AAAA,cAAlBC,KAAkB,SAAlBA,KAAkB;AAAA,cAAXC,IAAW,SAAXA,IAAW;AAC/B,cAAIC,QAAJ;;AACA,cAAIJ,KAAK,CAACK,IAAN,IAAc,MAAlB,EAA0B;AACxBD,YAAAA,QAAQ,GAAG,MAAX;AACD,WAFD,MAEO,IAAIJ,KAAK,CAACK,IAAN,IAAc,MAAlB,EAA0B;AAC/BD,YAAAA,QAAQ,GAAG,aAAX;AACD,WAFM,MAEA,IAAIJ,KAAK,CAACK,IAAN,IAAc,SAAlB,EAA6B;AAClCD,YAAAA,QAAQ,GAAG,MAAX;AACD;;AAED,iBAAO,6BAAC,sBAAD;AAAW,YAAA,IAAI,EAAEA,QAAjB;AAA2B,YAAA,IAAI,EAAED,IAAjC;AAAuC,YAAA,KAAK,EAAED,KAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;AAZ4B,OAAhB;AAAA,KADjB;AAeE,IAAA,aAAa,EAAE;AACbI,MAAAA,SAAS,EAAE,KADE;AAEbC,MAAAA,eAAe,EAAE,QAFJ;AAGbC,MAAAA,iBAAiB,EAAE;AAHN,KAfjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAoBE,6BAAC,GAAD,CAAK,MAAL;AAAY,IAAA,IAAI,EAAC,MAAjB;AAAwB,IAAA,SAAS,EAAEC,mBAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApBF,EAqBE,6BAAC,GAAD,CAAK,MAAL;AAAY,IAAA,IAAI,EAAC,MAAjB;AAAwB,IAAA,SAAS,EAAEC,mBAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArBF,EAsBE,6BAAC,GAAD,CAAK,MAAL;AAAY,IAAA,IAAI,EAAC,SAAjB;AAA2B,IAAA,SAAS,EAAEC,sBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAtBF,CADF;AA0BD;;AAWD,IAAMC,UAAU,GAAG,CAAC,SAAD,CAAnB;;AACO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,SAAD;AAAA,SAAuBF,UAAU,CAACG,QAAX,CAAoBD,SAApB,CAAvB;AAAA,CAAhB","sourcesContent":["/**\n * This is the navigator you will modify to display the logged-in screens of your app.\n * You can use RootNavigator to also display an auth flow or other user flows.\n *\n * You'll likely spend most of your time in this file.\n */\nimport React from \"react\"\nimport { createStackNavigator } from \"@react-navigation/stack\"\nimport { HomeScreen, DemoScreen, ProfileScreen } from \"../screens\"\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs'\nimport { AntDesign } from '@expo/vector-icons'\n\n/**\n * This type allows TypeScript to know what routes are defined in this navigator\n * as well as what properties (if any) they might take when navigating to them.\n *\n * If no params are allowed, pass through `undefined`. Generally speaking, we\n * recommend using your MobX-State-Tree store(s) to keep application state\n * rather than passing state through navigation params.\n *\n * For more information, see this documentation:\n *   https://reactnavigation.org/docs/params/\n *   https://reactnavigation.org/docs/typescript#type-checking-the-navigator\n */\nexport type PrimaryParamList = {\n  home: undefined,\n  story: undefined\n}\n\n// Documentation: https://reactnavigation.org/docs/stack-navigator/\nconst Tab = createBottomTabNavigator()\n// const Stack = createStackNavigator<PrimaryParamList>()\n\nexport function PrimaryNavigator() {\n  return (\n    <Tab.Navigator\n      screenOptions={({ route }) => ({\n        tabBarIcon: ({ color, size }) => {\n          let iconName\n          if (route.name == 'home') {\n            iconName = 'home'\n          } else if (route.name == 'demo') {\n            iconName = 'plussquareo'\n          } else if (route.name == 'profile') {\n            iconName = 'user'\n          }\n\n          return <AntDesign name={iconName} size={size} color={color} />\n        }\n      })}\n      tabBarOptions={{\n        showLabel: false,\n        activeTintColor: 'tomato',\n        inactiveTintColor: 'gray',\n      }}>\n      <Tab.Screen name=\"home\" component={HomeScreen} />\n      <Tab.Screen name=\"demo\" component={DemoScreen} />\n      <Tab.Screen name=\"profile\" component={ProfileScreen} />\n    </Tab.Navigator>\n  )\n}\n\n/**\n * A list of routes from which we're allowed to leave the app when\n * the user presses the back button on Android.\n *\n * Anything not on this list will be a standard `back` action in\n * react-navigation.\n *\n * `canExit` is used in ./app/app.tsx in the `useBackButtonHandler` hook.\n */\nconst exitRoutes = [\"welcome\"]\nexport const canExit = (routeName: string) => exitRoutes.includes(routeName)\n"]},"metadata":{},"sourceType":"script"}