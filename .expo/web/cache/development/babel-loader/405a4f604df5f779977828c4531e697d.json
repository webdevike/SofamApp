{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addNotificationReceivedListener = addNotificationReceivedListener;\nexports.addNotificationsDroppedListener = addNotificationsDroppedListener;\nexports.addNotificationResponseReceivedListener = addNotificationResponseReceivedListener;\nexports.removeNotificationSubscription = removeNotificationSubscription;\nexports.removeAllNotificationListeners = removeAllNotificationListeners;\nexports.DEFAULT_ACTION_IDENTIFIER = void 0;\n\nvar _core = require(\"@unimodules/core\");\n\nvar _NotificationsEmitterModule = _interopRequireDefault(require(\"./NotificationsEmitterModule\"));\n\nvar emitter = new _core.EventEmitter(_NotificationsEmitterModule.default);\nvar didReceiveNotificationEventName = 'onDidReceiveNotification';\nvar didDropNotificationsEventName = 'onNotificationsDeleted';\nvar didReceiveNotificationResponseEventName = 'onDidReceiveNotificationResponse';\nvar DEFAULT_ACTION_IDENTIFIER = 'expo.modules.notifications.actions.DEFAULT';\nexports.DEFAULT_ACTION_IDENTIFIER = DEFAULT_ACTION_IDENTIFIER;\n\nfunction addNotificationReceivedListener(listener) {\n  return emitter.addListener(didReceiveNotificationEventName, listener);\n}\n\nfunction addNotificationsDroppedListener(listener) {\n  return emitter.addListener(didDropNotificationsEventName, listener);\n}\n\nfunction addNotificationResponseReceivedListener(listener) {\n  return emitter.addListener(didReceiveNotificationResponseEventName, listener);\n}\n\nfunction removeNotificationSubscription(subscription) {\n  emitter.removeSubscription(subscription);\n}\n\nfunction removeAllNotificationListeners() {\n  emitter.removeAllListeners(didReceiveNotificationEventName);\n  emitter.removeAllListeners(didDropNotificationsEventName);\n  emitter.removeAllListeners(didReceiveNotificationResponseEventName);\n}","map":{"version":3,"sources":["../src/NotificationsEmitter.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA;;AAGA;;AAGA,IAAM,OAAO,GAAG,IAAI,kBAAJ,CAAiB,mCAAjB,CAAhB;AAEA,IAAM,+BAA+B,GAAG,0BAAxC;AACA,IAAM,6BAA6B,GAAG,wBAAtC;AACA,IAAM,uCAAuC,GAAG,kCAAhD;AAEO,IAAM,yBAAyB,GAAG,4CAAlC;;;AAED,SAAU,+BAAV,CACJ,QADI,EACmC;AAEvC,SAAO,OAAO,CAAC,WAAR,CAAkC,+BAAlC,EAAmE,QAAnE,CAAP;AACD;;AAEK,SAAU,+BAAV,CAA0C,QAA1C,EAA8D;AAClE,SAAO,OAAO,CAAC,WAAR,CAA0B,6BAA1B,EAAyD,QAAzD,CAAP;AACD;;AAEK,SAAU,uCAAV,CACJ,QADI,EAC2C;AAE/C,SAAO,OAAO,CAAC,WAAR,CACL,uCADK,EAEL,QAFK,CAAP;AAID;;AAEK,SAAU,8BAAV,CAAyC,YAAzC,EAAmE;AACvE,EAAA,OAAO,CAAC,kBAAR,CAA2B,YAA3B;AACD;;AAEK,SAAU,8BAAV,GAAwC;AAC5C,EAAA,OAAO,CAAC,kBAAR,CAA2B,+BAA3B;AACA,EAAA,OAAO,CAAC,kBAAR,CAA2B,6BAA3B;AACA,EAAA,OAAO,CAAC,kBAAR,CAA2B,uCAA3B;AACD","sourcesContent":["import { EventEmitter, Subscription } from '@unimodules/core';\n\nimport { Notification, NotificationResponse } from './Notifications.types';\nimport NotificationsEmitterModule from './NotificationsEmitterModule';\n\n// Web uses SyntheticEventEmitter\nconst emitter = new EventEmitter(NotificationsEmitterModule);\n\nconst didReceiveNotificationEventName = 'onDidReceiveNotification';\nconst didDropNotificationsEventName = 'onNotificationsDeleted';\nconst didReceiveNotificationResponseEventName = 'onDidReceiveNotificationResponse';\n\nexport const DEFAULT_ACTION_IDENTIFIER = 'expo.modules.notifications.actions.DEFAULT';\n\nexport function addNotificationReceivedListener(\n  listener: (event: Notification) => void\n): Subscription {\n  return emitter.addListener<Notification>(didReceiveNotificationEventName, listener);\n}\n\nexport function addNotificationsDroppedListener(listener: () => void): Subscription {\n  return emitter.addListener<void>(didDropNotificationsEventName, listener);\n}\n\nexport function addNotificationResponseReceivedListener(\n  listener: (event: NotificationResponse) => void\n): Subscription {\n  return emitter.addListener<NotificationResponse>(\n    didReceiveNotificationResponseEventName,\n    listener\n  );\n}\n\nexport function removeNotificationSubscription(subscription: Subscription) {\n  emitter.removeSubscription(subscription);\n}\n\nexport function removeAllNotificationListeners() {\n  emitter.removeAllListeners(didReceiveNotificationEventName);\n  emitter.removeAllListeners(didDropNotificationsEventName);\n  emitter.removeAllListeners(didReceiveNotificationResponseEventName);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}