{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RegisterScreen = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _taggedTemplateLiteralLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/taggedTemplateLiteralLoose\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _mobxReactLite = require(\"mobx-react-lite\");\n\nvar _reactNative = require(\"react-native\");\n\nvar _components = require(\"../components\");\n\nvar _theme = require(\"../theme\");\n\nvar _client = require(\"@apollo/client\");\n\nvar _storage = require(\"../utils/storage\");\n\nvar _expoStatusBar = require(\"expo-status-bar\");\n\nvar _cache = require(\"../cache\");\n\nvar _jsxFileName = \"/Users/isaacweber/code/SofamApp/app/screens/register-screen.tsx\";\n\nfunction _templateObject3() {\n  var data = (0, _taggedTemplateLiteralLoose2.default)([\"\\n{\\n  users {\\n    id\\n    name\\n  }\\n}\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = (0, _taggedTemplateLiteralLoose2.default)([\"\\n  {\\n    isLoggedIn @client\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = (0, _taggedTemplateLiteralLoose2.default)([\"\\n  mutation register($email: String!, $password: String!, $name: String!, $secretCode: String!) {\\n    register(data: {\\n      email: $email, \\n      password: $password,\\n      name: $name,\\n      secretCode: $secretCode\\n      }) {\\n        id\\n        accessToken\\n        name\\n      }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar TEXT = {\n  color: _theme.color.palette.white,\n  fontFamily: _theme.typography.primary\n};\nvar TEXT_CONTAINER = {\n  marginBottom: _theme.spacing[8]\n};\nvar BOTTOM_TEXT_CONTAINER = {\n  display: \"flex\",\n  flexDirection: \"row\",\n  marginTop: _theme.spacing[3]\n};\n\nvar HEADING = _objectSpread(_objectSpread({}, TEXT), {}, {\n  fontSize: 32,\n  fontWeight: \"700\",\n  textAlign: \"center\",\n  marginBottom: _theme.spacing[2]\n});\n\nvar CAPTION = _objectSpread(_objectSpread({}, TEXT), {}, {\n  fontSize: 20,\n  textAlign: \"center\"\n});\n\nvar BOLD = {\n  fontWeight: \"bold\"\n};\nvar FULL = {\n  flex: 1,\n  alignItems: \"stretch\",\n  justifyContent: \"center\",\n  backgroundColor: \"#1F1944\"\n};\nvar CONTAINER = {\n  margin: _theme.spacing[5]\n};\n\nvar TEXT_INPUT = _objectSpread({\n  paddingVertical: _theme.spacing[4],\n  paddingHorizontal: _theme.spacing[4],\n  marginBottom: _theme.spacing[5],\n  backgroundColor: \"#413D48\",\n  borderRadius: 50\n}, TEXT);\n\nvar LOGIN_BUTTON = {\n  paddingVertical: _theme.spacing[4],\n  paddingHorizontal: _theme.spacing[4],\n  backgroundColor: _theme.color.palette.orange,\n  borderRadius: 50\n};\n\nvar LOGIN_BUTTON_TEXT = _objectSpread(_objectSpread(_objectSpread({}, TEXT), BOLD), {}, {\n  fontSize: 14,\n  letterSpacing: 2\n});\n\nvar REGISTER_MUTATION = (0, _client.gql)(_templateObject());\nvar IS_LOGGED_IN = (0, _client.gql)(_templateObject2());\nvar USERS = (0, _client.gql)(_templateObject3());\nvar RegisterScreen = (0, _mobxReactLite.observer)(function RegisterScreen(props) {\n  var _useMutation = (0, _client.useMutation)(REGISTER_MUTATION),\n      _useMutation2 = (0, _slicedToArray2.default)(_useMutation, 1),\n      register = _useMutation2[0];\n\n  var _useState = (0, _react.useState)(\"\"),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(\"\"),\n      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var _useState5 = (0, _react.useState)(\"\"),\n      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),\n      name = _useState6[0],\n      setName = _useState6[1];\n\n  var _useState7 = (0, _react.useState)(\"\"),\n      _useState8 = (0, _slicedToArray2.default)(_useState7, 2),\n      secretCode = _useState8[0],\n      setsecretCode = _useState8[1];\n\n  var loggedIn = (0, _client.useReactiveVar)(_cache.accessTokenVar);\n  return _react.default.createElement(_reactNative.View, {\n    style: FULL,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(_reactNative.KeyboardAvoidingView, {\n    style: CONTAINER,\n    behavior: _reactNative.Platform.OS === \"ios\" ? \"padding\" : \"height\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, _react.default.createElement(_reactNative.View, {\n    style: TEXT_CONTAINER,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, _react.default.createElement(_components.Text, {\n    style: HEADING,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }\n  }, \"Signup!\"), _react.default.createElement(_components.Text, {\n    style: CAPTION,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  }, \"The only social media for families\")), _react.default.createElement(_reactNative.TextInput, {\n    placeholderTextColor: \"#BDBDBD\",\n    style: TEXT_INPUT,\n    onChangeText: function onChangeText(text) {\n      return setEmail(text);\n    },\n    value: email,\n    placeholder: \"Email\",\n    autoCapitalize: \"none\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }), _react.default.createElement(_reactNative.TextInput, {\n    placeholderTextColor: \"#BDBDBD\",\n    style: TEXT_INPUT,\n    onChangeText: function onChangeText(text) {\n      return setPassword(text);\n    },\n    secureTextEntry: true,\n    value: password,\n    placeholder: \"Password\",\n    autoCapitalize: \"none\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }), _react.default.createElement(_reactNative.TextInput, {\n    placeholderTextColor: \"#BDBDBD\",\n    style: TEXT_INPUT,\n    onChangeText: function onChangeText(text) {\n      return setName(text);\n    },\n    value: name,\n    placeholder: \"Name\",\n    autoCapitalize: \"none\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  }), _react.default.createElement(_reactNative.TextInput, {\n    placeholderTextColor: \"#BDBDBD\",\n    style: TEXT_INPUT,\n    secureTextEntry: true,\n    onChangeText: function onChangeText(text) {\n      return setsecretCode(text);\n    },\n    value: secretCode,\n    placeholder: \"Secret Code\",\n    autoCapitalize: \"none\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }\n  }), _react.default.createElement(_components.Button, {\n    style: LOGIN_BUTTON,\n    textStyle: LOGIN_BUTTON_TEXT,\n    text: \"Signup\",\n    onPress: function _callee() {\n      var _await$register, data;\n\n      return _regenerator.default.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regenerator.default.awrap(register({\n                variables: {\n                  email: email,\n                  password: password,\n                  name: name,\n                  secretCode: secretCode\n                },\n                update: function update(proxy, _ref) {\n                  var register = _ref.data.register;\n                  var data = proxy.readQuery({\n                    query: USERS\n                  });\n                  proxy.writeQuery({\n                    query: USERS,\n                    data: {\n                      users: [].concat((0, _toConsumableArray2.default)(data.users), [register])\n                    }\n                  });\n                }\n              }));\n\n            case 2:\n              _await$register = _context.sent;\n              data = _await$register.data;\n              (0, _storage.saveString)(\"@authToken\", data.register.accessToken);\n              (0, _cache.accessTokenVar)(true);\n\n              _cache.cache.writeQuery({\n                query: IS_LOGGED_IN,\n                data: {\n                  isLoggedIn: loggedIn\n                }\n              });\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }\n  }), _react.default.createElement(_reactNative.View, {\n    style: BOTTOM_TEXT_CONTAINER,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }\n  }, _react.default.createElement(_components.Text, {\n    style: {\n      marginRight: _theme.spacing[1]\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 11\n    }\n  }, \"Already have an Account?\"), _react.default.createElement(_reactNative.TouchableOpacity, {\n    onPress: function onPress() {\n      return props.navigation.navigate(\"login\");\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 11\n    }\n  }, _react.default.createElement(_components.Text, {\n    style: {\n      fontWeight: \"bold\",\n      fontSize: 16\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }\n  }, \"Login\"))), _react.default.createElement(_expoStatusBar.StatusBar, {\n    style: \"light\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 9\n    }\n  })));\n});\nexports.RegisterScreen = RegisterScreen;","map":{"version":3,"sources":["/Users/isaacweber/code/SofamApp/app/screens/register-screen.tsx"],"names":["TEXT","color","palette","white","fontFamily","typography","primary","TEXT_CONTAINER","marginBottom","spacing","BOTTOM_TEXT_CONTAINER","display","flexDirection","marginTop","HEADING","fontSize","fontWeight","textAlign","CAPTION","BOLD","FULL","flex","alignItems","justifyContent","backgroundColor","CONTAINER","margin","TEXT_INPUT","paddingVertical","paddingHorizontal","borderRadius","LOGIN_BUTTON","orange","LOGIN_BUTTON_TEXT","letterSpacing","REGISTER_MUTATION","gql","IS_LOGGED_IN","USERS","RegisterScreen","props","register","email","setEmail","password","setPassword","name","setName","secretCode","setsecretCode","loggedIn","accessTokenVar","Platform","OS","text","variables","update","proxy","data","readQuery","query","writeQuery","users","accessToken","cache","isLoggedIn","marginRight","navigation","navigate"],"mappings":"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","sourcesContent":["import React, { FunctionComponent as Component, useState } from \"react\"\nimport { observer } from \"mobx-react-lite\"\nimport { ViewStyle, View, TextInput, ImageStyle, TextStyle, KeyboardAvoidingView, Platform, TouchableOpacity } from \"react-native\"\nimport { Button, Text } from \"../components\"\nimport { color, spacing, typography } from \"../theme\"\nimport { gql, useMutation, useReactiveVar } from \"@apollo/client\"\nimport { saveString, loadString } from \"../utils/storage\"\nimport { StatusBar } from 'expo-status-bar';\nimport { accessTokenVar, cache } from '../cache'\n\n// Styles\nconst TEXT: TextStyle = {\n  color: color.palette.white,\n  fontFamily: typography.primary,\n}\n\nconst TEXT_CONTAINER: ViewStyle = {\n  marginBottom: spacing[8]\n}\n\nconst BOTTOM_TEXT_CONTAINER: ViewStyle = {\n  display: \"flex\",\n  flexDirection: \"row\",\n  marginTop: spacing[3]\n}\n\nconst HEADING: TextStyle = {\n  ...TEXT,\n  fontSize: 32,\n  fontWeight: \"700\",\n  textAlign: \"center\",\n  marginBottom: spacing[2],\n}\n\nconst CAPTION: TextStyle = {\n  ...TEXT,\n  fontSize: 20,\n  textAlign: \"center\"\n}\n\nconst BOLD: TextStyle = { fontWeight: \"bold\" }\n\nconst FULL: ViewStyle = {\n  flex: 1,\n  alignItems: \"stretch\",\n  justifyContent: \"center\",\n  backgroundColor: \"#1F1944\",\n}\n\nconst CONTAINER: ViewStyle = {\n  margin: spacing[5]\n}\n\nconst TEXT_INPUT: ViewStyle = {\n  paddingVertical: spacing[4],\n  paddingHorizontal: spacing[4],\n  marginBottom: spacing[5],\n  backgroundColor: \"#413D48\",\n  borderRadius: 50,\n  ...TEXT\n}\n\nconst LOGIN_BUTTON: ViewStyle = {\n  paddingVertical: spacing[4],\n  paddingHorizontal: spacing[4],\n  backgroundColor: color.palette.orange,\n  borderRadius: 50,\n}\n\nconst LOGIN_BUTTON_TEXT: TextStyle = {\n  ...TEXT,\n  ...BOLD,\n  fontSize: 14,\n  letterSpacing: 2,\n}\n\nconst REGISTER_MUTATION = gql`\n  mutation register($email: String!, $password: String!, $name: String!, $secretCode: String!) {\n    register(data: {\n      email: $email, \n      password: $password,\n      name: $name,\n      secretCode: $secretCode\n      }) {\n        id\n        accessToken\n        name\n      }\n  }\n`\n\nconst IS_LOGGED_IN = gql`\n  {\n    isLoggedIn @client\n  }\n`\n\nconst USERS = gql`\n{\n  users {\n    id\n    name\n  }\n}\n`\n\nexport const RegisterScreen: Component = observer(function RegisterScreen(props) {\n  const [register] = useMutation(REGISTER_MUTATION)\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [name, setName] = useState(\"\")\n  const [secretCode, setsecretCode] = useState(\"\")\n  const loggedIn = useReactiveVar(accessTokenVar)\n  return (\n    <View style={FULL}>\n      <KeyboardAvoidingView\n        style={CONTAINER}\n        behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\n      >\n        <View style={TEXT_CONTAINER}>\n          <Text style={HEADING}>Signup!</Text>\n          <Text style={CAPTION}>The only social media for families</Text>\n        </View>\n        <TextInput\n          placeholderTextColor=\"#BDBDBD\"\n          style={TEXT_INPUT}\n          onChangeText={text => setEmail(text)}\n          value={email}\n          placeholder=\"Email\"\n          autoCapitalize=\"none\"\n        />\n        <TextInput\n          placeholderTextColor=\"#BDBDBD\"\n          style={TEXT_INPUT}\n          onChangeText={text => setPassword(text)}\n          secureTextEntry={true}\n          value={password}\n          placeholder=\"Password\"\n          autoCapitalize=\"none\"\n        />\n        <TextInput\n          placeholderTextColor=\"#BDBDBD\"\n          style={TEXT_INPUT}\n          onChangeText={text => setName(text)}\n          value={name}\n          placeholder=\"Name\"\n          autoCapitalize=\"none\"\n        />\n        <TextInput\n          placeholderTextColor=\"#BDBDBD\"\n          style={TEXT_INPUT}\n          secureTextEntry={true}\n          onChangeText={text => setsecretCode(text)}\n          value={secretCode}\n          placeholder=\"Secret Code\"\n          autoCapitalize=\"none\"\n        />\n        <Button\n          style={LOGIN_BUTTON}\n          textStyle={LOGIN_BUTTON_TEXT}\n          text=\"Signup\"\n          onPress={async () => {\n            const { data }: any = await register({\n              variables: {\n                email: email,\n                password: password,\n                name,\n                secretCode\n              },\n              update: (proxy, { data: { register } }) => {\n                const data = proxy.readQuery({ query: USERS })\n                proxy.writeQuery({\n                  query: USERS,\n                  data: {\n                    users: [...data.users, register]\n                  }\n                })\n              }\n            })\n\n            saveString(\"@authToken\", data.register.accessToken)\n            accessTokenVar(true)\n            cache.writeQuery({\n              query: IS_LOGGED_IN,\n              data: {\n                isLoggedIn: loggedIn,\n              },\n            })\n          }}\n        />\n        <View style={BOTTOM_TEXT_CONTAINER}>\n          <Text style={{ marginRight: spacing[1] }}>Already have an Account?</Text>\n          <TouchableOpacity onPress={() => props.navigation.navigate(\"login\")}>\n            <Text style={{ fontWeight: \"bold\", fontSize: 16 }}>Login</Text>\n          </TouchableOpacity>\n        </View>\n        <StatusBar style=\"light\" />\n      </KeyboardAvoidingView>\n    </View>\n  )\n})\n"]},"metadata":{},"sourceType":"script"}