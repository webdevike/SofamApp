{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AddMemoryScreen = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _taggedTemplateLiteralLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/taggedTemplateLiteralLoose\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _client = require(\"@apollo/client\");\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _components = require(\"../components\");\n\nvar _theme = require(\"../theme\");\n\nvar _storage = require(\"../utils/storage\");\n\nvar _apolloUploadClient = require(\"apollo-upload-client\");\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _uploadImage = require(\"../utils/uploadImage\");\n\nvar _expoAv = require(\"expo-av\");\n\nvar _jsxFileName = \"/Users/isaacweber/code/SofamApp/app/screens/add-memory-screen.tsx\";\n\nfunction _templateObject2() {\n  var data = (0, _taggedTemplateLiteralLoose2.default)([\"\\n{\\n  memories {\\n    id\\n    title\\n    location\\n    thumbnail\\n  }\\n}\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = (0, _taggedTemplateLiteralLoose2.default)([\"\\nmutation createMemory($file: Upload!, $title: String!, $location: String) {\\n  createMemory(file: $file, title: $title, location: $location) {\\n    id\\n    title\\n    thumbnail\\n    signedRequest\\n    url\\n  }\\n}\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar ROOT = {\n  backgroundColor: _theme.color.palette.white,\n  flex: 1\n};\nvar TEXT = {\n  color: _theme.color.palette.black,\n  fontFamily: _theme.typography.primary\n};\n\nvar TEXT_INPUT = _objectSpread({\n  paddingVertical: _theme.spacing[4],\n  paddingHorizontal: _theme.spacing[4],\n  marginBottom: _theme.spacing[5],\n  borderRadius: 50\n}, TEXT);\n\nvar IMAGE_WITH_STORY = {\n  flex: 1\n};\nvar LOGIN_BUTTON = {\n  paddingVertical: _theme.spacing[4],\n  paddingHorizontal: _theme.spacing[4],\n  backgroundColor: _theme.color.palette.black,\n  borderRadius: 50\n};\n\nvar LOGIN_BUTTON_TEXT = _objectSpread(_objectSpread({}, TEXT), {}, {\n  fontSize: 14,\n  color: _theme.color.palette.white,\n  letterSpacing: 2\n});\n\nvar CREATE_MEMORY = (0, _client.gql)(_templateObject());\nvar MEMORIES = (0, _client.gql)(_templateObject2());\n\nvar AddMemoryScreen = function AddMemoryScreen() {\n  var _useState = (0, _react.useState)(),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      fileData = _useState2[0],\n      setFileData = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(\"\"),\n      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n      title = _useState4[0],\n      setTitle = _useState4[1];\n\n  var _useState5 = (0, _react.useState)(\"\"),\n      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),\n      location = _useState6[0],\n      setLocation = _useState6[1];\n\n  var _useMutation = (0, _client.useMutation)(CREATE_MEMORY),\n      _useMutation2 = (0, _slicedToArray2.default)(_useMutation, 1),\n      createMemory = _useMutation2[0];\n\n  var navigation = (0, _native.useNavigation)();\n  (0, _react.useEffect)(function () {\n    ;\n\n    (function _callee() {\n      var fileObject;\n      return _regenerator.default.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regenerator.default.awrap((0, _storage.load)(\"@fileObject\"));\n\n            case 2:\n              fileObject = _context.sent;\n              setFileData(fileObject);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var handleCreateMemory = function handleCreateMemory() {\n    var filename, file, _await$createMemory, data;\n\n    return _regenerator.default.async(function handleCreateMemory$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            navigation.navigate('memory');\n            filename = fileData.uri.split('/').pop();\n            file = new _apolloUploadClient.ReactNativeFile({\n              uri: fileData.uri,\n              name: filename,\n              type: fileData.type\n            });\n            _context2.next = 5;\n            return _regenerator.default.awrap(createMemory({\n              variables: {\n                file: file,\n                title: title,\n                location: location\n              },\n              update: function update(proxy, _ref) {\n                var createMemory = _ref.data.createMemory;\n                var data = proxy.readQuery({\n                  query: MEMORIES\n                });\n                proxy.writeQuery({\n                  query: MEMORIES,\n                  data: {\n                    memories: [].concat((0, _toConsumableArray2.default)(data.memories), [createMemory])\n                  }\n                });\n              }\n            }));\n\n          case 5:\n            _await$createMemory = _context2.sent;\n            data = _await$createMemory.data;\n            (0, _uploadImage.uploadImage)(file, data.createMemory.signedRequest);\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var renderVideoOrImage = function renderVideoOrImage() {\n    if (fileData == null ? void 0 : fileData.uri.includes('.mov')) {\n      return _react.default.createElement(_expoAv.Video, {\n        source: {\n          uri: fileData == null ? void 0 : fileData.uri\n        },\n        rate: 1.0,\n        volume: 0,\n        isMuted: false,\n        resizeMode: \"contain\",\n        shouldPlay: true,\n        isLooping: true,\n        style: {\n          height: 250,\n          flex: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 9\n        }\n      });\n    } else {\n      return _react.default.createElement(_reactNative.Image, {\n        style: IMAGE_WITH_STORY,\n        source: {\n          uri: fileData == null ? void 0 : fileData.uri\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 9\n        }\n      });\n    }\n  };\n\n  return _react.default.createElement(_reactNative.View, {\n    style: ROOT,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 5\n    }\n  }, renderVideoOrImage(), _react.default.createElement(_components.FormRow, {\n    preset: \"top\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }\n  }, _react.default.createElement(_reactNative.TextInput, {\n    placeholderTextColor: \"#BDBDBD\",\n    style: TEXT_INPUT,\n    onChangeText: function onChangeText(text) {\n      return setTitle(text);\n    },\n    value: title,\n    placeholder: \"Title\",\n    autoCapitalize: \"none\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }\n  }), _react.default.createElement(_reactNative.TextInput, {\n    placeholderTextColor: \"#BDBDBD\",\n    style: TEXT_INPUT,\n    onChangeText: function onChangeText(text) {\n      return setLocation(text);\n    },\n    value: location,\n    placeholder: \"Location\",\n    autoCapitalize: \"none\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }\n  }), _react.default.createElement(_components.Button, {\n    style: LOGIN_BUTTON,\n    textStyle: LOGIN_BUTTON_TEXT,\n    text: \"Create Memory\",\n    onPress: handleCreateMemory,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }\n  })));\n};\n\nexports.AddMemoryScreen = AddMemoryScreen;","map":{"version":3,"sources":["/Users/isaacweber/code/SofamApp/app/screens/add-memory-screen.tsx"],"names":["ROOT","backgroundColor","color","palette","white","flex","TEXT","black","fontFamily","typography","primary","TEXT_INPUT","paddingVertical","spacing","paddingHorizontal","marginBottom","borderRadius","IMAGE_WITH_STORY","LOGIN_BUTTON","LOGIN_BUTTON_TEXT","fontSize","letterSpacing","CREATE_MEMORY","gql","MEMORIES","AddMemoryScreen","fileData","setFileData","title","setTitle","location","setLocation","createMemory","navigation","fileObject","handleCreateMemory","navigate","filename","uri","split","pop","file","ReactNativeFile","name","type","variables","update","proxy","data","readQuery","query","writeQuery","memories","signedRequest","renderVideoOrImage","includes","height","text"],"mappings":"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","sourcesContent":["import { gql, useMutation } from \"@apollo/client\"\nimport React, { FunctionComponent as Component, useEffect, useState } from \"react\"\n// import { observer } from \"mobx-react-lite\"\nimport { Image, ImageStyle, TextInput, TextStyle, View, ViewStyle } from \"react-native\"\nimport { FormRow, Button } from \"../components\"\nimport { color, spacing, typography } from \"../theme\"\nimport { load } from \"../utils/storage\"\nimport { ReactNativeFile } from 'apollo-upload-client'\nimport { useNavigation, } from \"@react-navigation/native\"\nimport { uploadImage } from \"../utils/uploadImage\"\nimport { Video } from \"expo-av\"\n\nconst ROOT: ViewStyle = {\n  backgroundColor: color.palette.white,\n  flex: 1\n}\n\nconst TEXT: TextStyle = {\n  color: color.palette.black,\n  fontFamily: typography.primary,\n}\n\nconst TEXT_INPUT: ViewStyle = {\n  paddingVertical: spacing[4],\n  paddingHorizontal: spacing[4],\n  marginBottom: spacing[5],\n  borderRadius: 50,\n  ...TEXT\n}\n\nconst IMAGE_WITH_STORY: ImageStyle = {\n  flex: 1,\n}\n\nconst LOGIN_BUTTON: ViewStyle = {\n  paddingVertical: spacing[4],\n  paddingHorizontal: spacing[4],\n  backgroundColor: color.palette.black,\n  borderRadius: 50,\n}\n\nconst LOGIN_BUTTON_TEXT: TextStyle = {\n  ...TEXT,\n  fontSize: 14,\n  color: color.palette.white,\n  letterSpacing: 2,\n}\n\nconst CREATE_MEMORY = gql`\nmutation createMemory($file: Upload!, $title: String!, $location: String) {\n  createMemory(file: $file, title: $title, location: $location) {\n    id\n    title\n    thumbnail\n    signedRequest\n    url\n  }\n}`\n\nconst MEMORIES = gql`\n{\n  memories {\n    id\n    title\n    location\n    thumbnail\n  }\n}\n`\n\ninterface FileDataObject {\n  uri: string\n}\nexport const AddMemoryScreen: Component = function AddMemoryScreen() {\n  const [fileData, setFileData] = useState<FileDataObject>()\n  const [title, setTitle] = useState(\"\")\n  const [location, setLocation] = useState(\"\")\n  const [createMemory] = useMutation(CREATE_MEMORY)\n  const navigation = useNavigation()\n  useEffect(() => {\n    ; (async () => {\n      const fileObject = await load(\"@fileObject\")\n      // the file that was chosen from the pickImage function\n      setFileData(fileObject)\n    })()\n  }, [])\n\n  const handleCreateMemory = async () => {\n    navigation.navigate('memory')\n    const filename = fileData.uri.split('/').pop()\n\n    const file = new ReactNativeFile({\n      uri: fileData.uri,\n      name: filename,\n      type: fileData.type\n    })\n\n    const { data } = await createMemory({\n      variables: {\n        file,\n        title,\n        location\n      },\n      // optimisticResponse: {\n      //   __typename: 'Mutation',\n      //   createMemory: {\n      //     __typename: \"Memory\",\n      //     id: Math.round(Math.random() * -1000000),\n      //     location: \"testing\",\n      //     thumbnail: \"https://api.adorable.io/avatars/285/abott@adorable.png\",\n      //     title: \"TESTING IF OPTIMSTIC RESPONSE IS WORKING\",\n      //   }\n      // },\n      update: (proxy, { data: { createMemory } }) => {\n        const data = proxy.readQuery({ query: MEMORIES })\n        proxy.writeQuery({\n          query: MEMORIES,\n          data: {\n            memories: [...data.memories, createMemory]\n          }\n        })\n      }\n    })\n    uploadImage(file, data.createMemory.signedRequest)\n  }\n  const renderVideoOrImage = () => {\n    if (fileData?.uri.includes('.mov')) {\n      return (\n        <Video\n          source={{ uri: fileData?.uri }}\n          rate={1.0}\n          volume={0}\n          isMuted={false}\n          resizeMode=\"contain\"\n          shouldPlay\n          isLooping\n          style={{\n            height: 250,\n            flex: 1,\n          }}\n        />\n      )\n    } else {\n      return (\n        <Image style={IMAGE_WITH_STORY} source={{ uri: fileData?.uri }} />\n      )\n    }\n  }\n  return (\n    <View style={ROOT} >\n      {renderVideoOrImage()}\n      <FormRow preset=\"top\">\n        <TextInput\n          placeholderTextColor=\"#BDBDBD\"\n          style={TEXT_INPUT}\n          onChangeText={text => setTitle(text)}\n          value={title}\n          placeholder=\"Title\"\n          autoCapitalize=\"none\"\n        />\n        <TextInput\n          placeholderTextColor=\"#BDBDBD\"\n          style={TEXT_INPUT}\n          onChangeText={text => setLocation(text)}\n          value={location}\n          placeholder=\"Location\"\n          autoCapitalize=\"none\"\n        />\n        <Button\n          style={LOGIN_BUTTON}\n          textStyle={LOGIN_BUTTON_TEXT}\n          text=\"Create Memory\"\n          onPress={handleCreateMemory}\n        />\n      </FormRow>\n    </View>\n  )\n}\n"]},"metadata":{},"sourceType":"script"}