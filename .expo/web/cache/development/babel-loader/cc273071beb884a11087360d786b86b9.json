{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.NAVIGATION_PERSISTENCE_KEY = exports.firestore = void 0;\n\nvar _taggedTemplateLiteralLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/taggedTemplateLiteralLoose\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nrequire(\"./i18n\");\n\nrequire(\"./utils/ignore-warnings\");\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNativeSafeAreaContext = require(\"react-native-safe-area-context\");\n\nvar _fonts = require(\"./theme/fonts\");\n\nvar storage = _interopRequireWildcard(require(\"./utils/storage\"));\n\nvar _navigation = require(\"./navigation\");\n\nvar _models = require(\"./models\");\n\nvar _client = require(\"@apollo/client\");\n\nvar _error = require(\"@apollo/client/link/error\");\n\nvar _apolloUploadClient = require(\"apollo-upload-client\");\n\nvar _context5 = require(\"@apollo/client/link/context\");\n\nvar _cache = require(\"./cache\");\n\nvar firebase = _interopRequireWildcard(require(\"firebase\"));\n\nrequire(\"firebase/firestore\");\n\nvar _reactNativeScreens = require(\"react-native-screens\");\n\nvar _jsxFileName = \"/Users/isaacweber/code/SofamApp/app/app.tsx\";\n\nfunction _templateObject() {\n  var data = (0, _taggedTemplateLiteralLoose2.default)([\"{isLoggedIn @client}\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n(0, _reactNativeScreens.enableScreens)();\nvar firebaseConfig = {\n  apiKey: \"AIzaSyAq-F_nrtxrHYHRA7q534GQQ6RPJloBukM\",\n  authDomain: \"sofam-448ea.firebaseapp.com\",\n  databaseURL: \"https://sofam-448ea.firebaseio.com\",\n  projectId: \"sofam-448ea\",\n  storageBucket: \"sofam-448ea.appspot.com\",\n  messagingSenderId: \"910753072077\",\n  appId: \"1:910753072077:web:2538140ccf4efa85d97a84\",\n  measurementId: \"G-1RLFNSRZRH\"\n};\nfirebase.initializeApp(firebaseConfig);\nvar firestore = firebase.firestore();\nexports.firestore = firestore;\nvar NAVIGATION_PERSISTENCE_KEY = \"NAVIGATION_STATE\";\nexports.NAVIGATION_PERSISTENCE_KEY = NAVIGATION_PERSISTENCE_KEY;\n\nvar App = function App() {\n  var navigationRef = (0, _react.useRef)();\n\n  var _useState = (0, _react.useState)(undefined),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      rootStore = _useState2[0],\n      setRootStore = _useState2[1];\n\n  var loggedIn = (0, _client.useReactiveVar)(_cache.accessTokenVar);\n  (0, _navigation.setRootNavigation)(navigationRef);\n  (0, _navigation.useBackButtonHandler)(navigationRef, _navigation.canExit);\n\n  var _useNavigationPersist = (0, _navigation.useNavigationPersistence)(storage, NAVIGATION_PERSISTENCE_KEY),\n      initialNavigationState = _useNavigationPersist.initialNavigationState,\n      onNavigationStateChange = _useNavigationPersist.onNavigationStateChange;\n\n  var uploadLink = (0, _apolloUploadClient.createUploadLink)({\n    uri: 'https://sofam-api.ikey2244.vercel.app/graphql'\n  });\n  var authLink = (0, _context5.setContext)(function _callee(_, _ref) {\n    var headers, token;\n    return _regenerator.default.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            headers = _ref.headers;\n            _context.next = 3;\n            return _regenerator.default.awrap((0, storage.loadString)(\"@authToken\"));\n\n          case 3:\n            token = _context.sent;\n            return _context.abrupt(\"return\", {\n              headers: _objectSpread(_objectSpread({}, headers), {}, {\n                authorization: token ? \"Bearer \" + token : \"\"\n              })\n            });\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n\n  var setToken = function setToken() {\n    var token;\n    return _regenerator.default.async(function setToken$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regenerator.default.awrap((0, storage.loadString)(\"@authToken\"));\n\n          case 2:\n            token = _context2.sent;\n            (0, _cache.accessTokenVar)(!!token);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var checkAuth = function checkAuth() {\n    return _regenerator.default.async(function checkAuth$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _cache.cache.writeQuery({\n              query: (0, _client.gql)(_templateObject()),\n              data: {\n                isLoggedIn: loggedIn\n              }\n            });\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  (0, _react.useEffect)(function () {\n    var isMounted = true;\n\n    (function _callee2() {\n      return _regenerator.default.async(function _callee2$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!isMounted) {\n                _context4.next = 8;\n                break;\n              }\n\n              _context4.next = 3;\n              return _regenerator.default.awrap(setToken());\n\n            case 3:\n              _context4.next = 5;\n              return _regenerator.default.awrap(checkAuth());\n\n            case 5:\n              _context4.next = 7;\n              return _regenerator.default.awrap((0, _fonts.initFonts)());\n\n            case 7:\n              (0, _models.setupRootStore)().then(setRootStore);\n\n            case 8:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n\n    return function () {\n      isMounted = false;\n    };\n  }, []);\n  if (!rootStore) return null;\n  var errorLink = (0, _error.onError)(function (_ref2) {\n    var graphQLErrors = _ref2.graphQLErrors,\n        networkError = _ref2.networkError;\n    console.log(\"errorLink -> graphQLErrors\", graphQLErrors);\n    console.log(\"errorLink -> networkError\", networkError);\n  });\n  var client = new _client.ApolloClient({\n    link: _client.ApolloLink.from([authLink, errorLink, uploadLink]),\n    cache: _cache.cache\n  });\n  return _react.default.createElement(_client.ApolloProvider, {\n    client: client,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(_models.RootStoreProvider, {\n    value: rootStore,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }, _react.default.createElement(_reactNativeSafeAreaContext.SafeAreaProvider, {\n    initialSafeAreaInsets: _reactNativeSafeAreaContext.initialWindowSafeAreaInsets,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, _react.default.createElement(_navigation.RootNavigator, {\n    ref: navigationRef,\n    initialState: initialNavigationState,\n    onStateChange: onNavigationStateChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }))));\n};\n\nvar _default = App;\nexports.default = _default;","map":{"version":3,"sources":["/Users/isaacweber/code/SofamApp/app/app.tsx"],"names":["firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","initializeApp","firestore","NAVIGATION_PERSISTENCE_KEY","App","navigationRef","undefined","rootStore","setRootStore","loggedIn","accessTokenVar","canExit","storage","initialNavigationState","onNavigationStateChange","uploadLink","uri","authLink","_","headers","token","authorization","setToken","checkAuth","cache","writeQuery","query","gql","data","isLoggedIn","isMounted","then","errorLink","graphQLErrors","networkError","console","log","client","ApolloClient","link","ApolloLink","from","initialWindowSafeAreaInsets"],"mappings":"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","sourcesContent":["import \"./i18n\"\nimport \"./utils/ignore-warnings\"\nimport React, { useState, useEffect, useRef, FunctionComponent as Component } from \"react\"\nimport { NavigationContainerRef } from \"@react-navigation/native\"\nimport { SafeAreaProvider, initialWindowSafeAreaInsets } from \"react-native-safe-area-context\"\nimport { initFonts } from \"./theme/fonts\"\nimport * as storage from \"./utils/storage\"\nimport {\n  useBackButtonHandler,\n  RootNavigator,\n  canExit,\n  setRootNavigation,\n  useNavigationPersistence,\n} from \"./navigation\"\nimport { RootStore, RootStoreProvider, setupRootStore } from \"./models\"\nimport { ApolloClient, ApolloProvider, gql, ApolloLink, useReactiveVar } from \"@apollo/client\"\nimport { onError } from \"@apollo/client/link/error\"\nimport { createUploadLink } from 'apollo-upload-client'\nimport { setContext } from '@apollo/client/link/context'\nimport { accessTokenVar, cache } from './cache'\nimport * as firebase from 'firebase'\nimport 'firebase/firestore'\nimport { enableScreens } from \"react-native-screens\"\nimport { loadString } from \"./utils/storage\"\n\nenableScreens()\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAq-F_nrtxrHYHRA7q534GQQ6RPJloBukM\",\n  authDomain: \"sofam-448ea.firebaseapp.com\",\n  databaseURL: \"https://sofam-448ea.firebaseio.com\",\n  projectId: \"sofam-448ea\",\n  storageBucket: \"sofam-448ea.appspot.com\",\n  messagingSenderId: \"910753072077\",\n  appId: \"1:910753072077:web:2538140ccf4efa85d97a84\",\n  measurementId: \"G-1RLFNSRZRH\"\n}\n\nfirebase.initializeApp(firebaseConfig)\n\nexport const firestore = firebase.firestore()\n\nexport const NAVIGATION_PERSISTENCE_KEY = \"NAVIGATION_STATE\"\n\n/**\n * This is the root component of our app.\n */\nconst App: Component<{}> = () => {\n  const navigationRef = useRef<NavigationContainerRef>()\n  const [rootStore, setRootStore] = useState<RootStore | undefined>(undefined)\n  const loggedIn = useReactiveVar(accessTokenVar)\n\n  setRootNavigation(navigationRef)\n  useBackButtonHandler(navigationRef, canExit)\n  const { initialNavigationState, onNavigationStateChange } = useNavigationPersistence(\n    storage,\n    NAVIGATION_PERSISTENCE_KEY,\n  )\n\n  const uploadLink = createUploadLink({\n    uri: 'https://sofam-api.ikey2244.vercel.app/graphql'\n    // uri: 'https://infinite-wave-95577.herokuapp.com/graphql'\n    // uri: 'http://localhost:4000/graphql'\n  })\n\n  const authLink = setContext(async (_, { headers }) => {\n    const token = await loadString(\"@authToken\")\n    return {\n      headers: {\n        ...headers,\n        authorization: token ? `Bearer ${token}` : \"\",\n      }\n    }\n  })\n\n  const setToken = async () => {\n    const token = await loadString(\"@authToken\")\n    accessTokenVar(!!token)\n  }\n  const checkAuth = async () => {\n    cache.writeQuery({\n      query: gql`{isLoggedIn @client}`,\n      data: {\n        isLoggedIn: loggedIn,\n      },\n    })\n  }\n\n  // Kick off initial async loading actions, like loading fonts and RootStore\n  useEffect(() => {\n    let isMounted = true\n    ; (async () => {\n      if (isMounted) {\n        await setToken()\n        await checkAuth()\n        await initFonts()\n        setupRootStore().then(setRootStore)\n      }\n    })()\n    return () => { isMounted = false }\n  }, [])\n\n  // Before we show the app, we have to wait for our state to be ready.\n  // In the meantime, don't render anything. This will be the background\n  // color set in native by rootView's background color. You can replace\n  // with your own loading component if you wish.\n  if (!rootStore) return null\n\n  const errorLink = onError(({ graphQLErrors, networkError }) => {\n    console.log(\"errorLink -> graphQLErrors\", graphQLErrors)\n    console.log(\"errorLink -> networkError\", networkError)\n  })\n\n  const client = new ApolloClient({\n    link: ApolloLink.from([authLink, errorLink, uploadLink]),\n    cache,\n  })\n\n  // otherwise, we're ready to render the app\n  return (\n    <ApolloProvider client={client}>\n      <RootStoreProvider value={rootStore}>\n        <SafeAreaProvider initialSafeAreaInsets={initialWindowSafeAreaInsets}>\n          <RootNavigator\n            ref={navigationRef}\n            initialState={initialNavigationState}\n            onStateChange={onNavigationStateChange}\n          />\n        </SafeAreaProvider>\n      </RootStoreProvider>\n    </ApolloProvider>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"script"}