{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CalendarScreen = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _mobxReactLite = require(\"mobx-react-lite\");\n\nvar _reactNative = require(\"react-native\");\n\nvar _components = require(\"../components\");\n\nvar _theme = require(\"../theme\");\n\nvar _reactNativeCalendars = require(\"react-native-calendars\");\n\nvar _jsxFileName = \"/Users/isaacweber/code/SofamApp/app/screens/calendar-screen.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar testIDs = require('../testIDs');\n\nvar ROOT = {\n  backgroundColor: _theme.color.palette.white,\n  flex: 1,\n  justifyContent: \"center\",\n  alignItems: \"center\"\n};\nvar TEXT = {\n  color: _theme.color.palette.black\n};\nvar LOGIN_BUTTON = {\n  paddingVertical: _theme.spacing[4],\n  paddingHorizontal: _theme.spacing[4],\n  backgroundColor: _theme.color.palette.orange,\n  borderRadius: 50\n};\n\nvar LOGIN_BUTTON_TEXT = _objectSpread(_objectSpread({}, TEXT), {}, {\n  fontSize: 14,\n  letterSpacing: 2\n});\n\nvar styles = _reactNative.StyleSheet.create({\n  emptyDate: {\n    backgroundColor: 'red',\n    flex: 1,\n    height: 15,\n    paddingTop: 30\n  },\n  item: {\n    backgroundColor: 'green',\n    borderRadius: 5,\n    flex: 1,\n    marginRight: 10,\n    marginTop: 17,\n    padding: 10\n  }\n});\n\nvar CalendarScreen = (0, _mobxReactLite.observer)(function CalendarScreen() {\n  var _useState = (0, _react.useState)({}),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      items = _useState2[0],\n      setItems = _useState2[1];\n\n  var timeToString = function timeToString(time) {\n    var date = new Date(time);\n    return date.toISOString().split('T')[0];\n  };\n\n  var loadItems = function loadItems(day) {\n    setTimeout(function () {\n      for (var i = -15; i < 85; i++) {\n        var time = day.timestamp + i * 24 * 60 * 60 * 1000;\n        var strTime = timeToString(time);\n\n        if (!items[strTime]) {\n          items[strTime] = [];\n          var numItems = Math.floor(Math.random() * 3 + 1);\n\n          for (var j = 0; j < numItems; j++) {\n            items[strTime].push({\n              name: 'Item for ' + strTime + ' #' + j,\n              height: Math.max(50, Math.floor(Math.random() * 150))\n            });\n          }\n        }\n      }\n\n      var newItems = {};\n      Object.keys(items).forEach(function (key) {\n        newItems[key] = items[key];\n      });\n      setItems({\n        items: newItems\n      });\n    }, 1000);\n  };\n\n  var renderItem = function renderItem(item) {\n    console.log(\"renderItem -> item\", item);\n    return _react.default.createElement(_reactNative.TouchableOpacity, {\n      testID: testIDs.agenda.ITEM,\n      style: [styles.item, {\n        height: item.height\n      }],\n      onPress: function onPress() {\n        return _reactNative.Alert.alert(item.name);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }\n    }, _react.default.createElement(_components.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }\n    }, item.name, \" TESTING\"));\n  };\n\n  var renderEmptyDate = function renderEmptyDate() {\n    return _react.default.createElement(_reactNative.View, {\n      style: styles.emptyDate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 7\n      }\n    }, _react.default.createElement(_components.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }\n    }, \"This is empty date!\"));\n  };\n\n  var rowHasChanged = function rowHasChanged(r1, r2) {\n    return r1.name !== r2.name;\n  };\n\n  return _react.default.createElement(_reactNativeCalendars.Agenda, {\n    testID: testIDs.agenda.CONTAINER,\n    items: {\n      '2020-05-15': [{\n        name: 'item 1 - any js object'\n      }],\n      '2020-05-16': [{\n        name: 'item 2 - any js object',\n        height: 80\n      }],\n      '2020-05-17': [],\n      '2020-05-18': [{\n        name: 'item 3 - any js object'\n      }, {\n        name: 'any js object'\n      }]\n    },\n    selected: '2020-05-22',\n    markingType: 'period',\n    markedDates: {\n      '2020-05-15': {\n        marked: true,\n        dotColor: '#50cebb'\n      },\n      '2020-05-16': {\n        marked: true,\n        dotColor: '#50cebb'\n      },\n      '2020-05-21': {\n        startingDay: true,\n        color: '#50cebb',\n        textColor: 'white'\n      },\n      '2020-05-22': {\n        color: '#70d7c7',\n        textColor: 'white'\n      },\n      '2020-05-23': {\n        color: '#70d7c7',\n        textColor: 'white',\n        marked: true,\n        dotColor: 'white'\n      },\n      '2020-05-24': {\n        color: '#70d7c7',\n        textColor: 'white'\n      },\n      '2020-05-25': {\n        endingDay: true,\n        color: '#50cebb',\n        textColor: 'white'\n      }\n    },\n    renderEmptyDate: renderEmptyDate,\n    rowHasChanged: rowHasChanged,\n    renderItem: renderItem,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 5\n    }\n  });\n});\nexports.CalendarScreen = CalendarScreen;","map":{"version":3,"sources":["/Users/isaacweber/code/SofamApp/app/screens/calendar-screen.tsx"],"names":["testIDs","require","ROOT","backgroundColor","color","palette","white","flex","justifyContent","alignItems","TEXT","black","LOGIN_BUTTON","paddingVertical","spacing","paddingHorizontal","orange","borderRadius","LOGIN_BUTTON_TEXT","fontSize","letterSpacing","styles","StyleSheet","create","emptyDate","height","paddingTop","item","marginRight","marginTop","padding","CalendarScreen","items","setItems","timeToString","time","date","Date","toISOString","split","loadItems","day","setTimeout","i","timestamp","strTime","numItems","Math","floor","random","j","push","name","max","newItems","Object","keys","forEach","key","renderItem","console","log","agenda","ITEM","Alert","alert","renderEmptyDate","rowHasChanged","r1","r2","CONTAINER","marked","dotColor","startingDay","textColor","endingDay"],"mappings":"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","sourcesContent":["import React, { FunctionComponent as Component, useState } from \"react\"\nimport { observer } from \"mobx-react-lite\"\nimport { Alert, StyleSheet, TextStyle, TouchableOpacity, View, ViewStyle } from \"react-native\"\nimport { Button, Screen, Text } from \"../components\"\nimport { color, spacing } from \"../theme\"\nimport { clear } from \"../utils/storage\"\nimport { accessTokenVar, cache } from \"../cache\"\nimport { useReactiveVar } from \"@apollo/client\"\nimport { Agenda } from 'react-native-calendars'\nconst testIDs = require('../testIDs')\n\nconst ROOT: ViewStyle = {\n  backgroundColor: color.palette.white,\n  flex: 1,\n  justifyContent: \"center\",\n  alignItems: \"center\",\n}\n\nconst TEXT: TextStyle = {\n  color: color.palette.black\n}\n\nconst LOGIN_BUTTON: ViewStyle = {\n  paddingVertical: spacing[4],\n  paddingHorizontal: spacing[4],\n  backgroundColor: color.palette.orange,\n  borderRadius: 50,\n}\n\nconst LOGIN_BUTTON_TEXT: TextStyle = {\n  ...TEXT,\n  fontSize: 14,\n  letterSpacing: 2,\n}\n\nconst styles = StyleSheet.create({\n  emptyDate: {\n    backgroundColor: 'red',\n    flex: 1,\n    height: 15,\n    paddingTop: 30\n  },\n  item: {\n    backgroundColor: 'green',\n    borderRadius: 5,\n    flex: 1,\n    marginRight: 10,\n    marginTop: 17,\n    padding: 10\n  }\n})\n\nexport const CalendarScreen: Component = observer(function CalendarScreen() {\n  const [items, setItems] = useState({})\n\n  const timeToString = (time) => {\n    const date = new Date(time)\n    return date.toISOString().split('T')[0]\n  }\n\n  const loadItems = (day) => {\n    setTimeout(() => {\n      for (let i = -15; i < 85; i++) {\n        const time = day.timestamp + i * 24 * 60 * 60 * 1000\n        const strTime = timeToString(time)\n        if (!items[strTime]) {\n          items[strTime] = []\n          const numItems = Math.floor(Math.random() * 3 + 1)\n          for (let j = 0; j < numItems; j++) {\n            items[strTime].push({\n              name: 'Item for ' + strTime + ' #' + j,\n              height: Math.max(50, Math.floor(Math.random() * 150))\n            })\n          }\n        }\n      }\n      const newItems = {}\n      Object.keys(items).forEach(key => { newItems[key] = items[key] })\n      setItems({\n        items: newItems\n      })\n    }, 1000)\n  }\n\n  const renderItem = (item) => {\n    console.log(\"renderItem -> item\", item)\n    return (\n      <TouchableOpacity\n        testID={testIDs.agenda.ITEM}\n        style={[styles.item, { height: item.height }]}\n        onPress={() => Alert.alert(item.name)}\n      >\n        <Text>{item.name} TESTING</Text>\n      </TouchableOpacity>\n    )\n  }\n\n  const renderEmptyDate = () => {\n    return (\n      <View style={styles.emptyDate}>\n        <Text>This is empty date!</Text>\n      </View>\n    )\n  }\n\n  const rowHasChanged = (r1, r2) => {\n    return r1.name !== r2.name\n  }\n\n  return (\n    <Agenda\n      testID={testIDs.agenda.CONTAINER}\n      items={{\n        '2020-05-15': [{ name: 'item 1 - any js object' }],\n        '2020-05-16': [{ name: 'item 2 - any js object', height: 80 }],\n        '2020-05-17': [],\n        '2020-05-18': [{ name: 'item 3 - any js object' }, { name: 'any js object' }]\n      }}\n      selected={'2020-05-22'}\n      markingType={'period'}\n      markedDates={{\n        '2020-05-15': { marked: true, dotColor: '#50cebb' },\n        '2020-05-16': { marked: true, dotColor: '#50cebb' },\n        '2020-05-21': { startingDay: true, color: '#50cebb', textColor: 'white' },\n        '2020-05-22': { color: '#70d7c7', textColor: 'white' },\n        '2020-05-23': { color: '#70d7c7', textColor: 'white', marked: true, dotColor: 'white' },\n        '2020-05-24': { color: '#70d7c7', textColor: 'white' },\n        '2020-05-25': { endingDay: true, color: '#50cebb', textColor: 'white' },\n      }}\n      renderEmptyDate={renderEmptyDate}\n      rowHasChanged={rowHasChanged}\n      renderItem={renderItem}\n    />\n  )\n})\n"]},"metadata":{},"sourceType":"script"}