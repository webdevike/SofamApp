{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AuthNavigator = AuthNavigator;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _stack = require(\"@react-navigation/stack\");\n\nvar _screens = require(\"../screens\");\n\nvar _jsxFileName = \"/Users/isaacweber/code/SofamApp/app/navigation/auth-navigator.tsx\";\nvar Stack = (0, _stack.createStackNavigator)();\n\nfunction AuthNavigator() {\n  return _react.default.createElement(Stack.Navigator, {\n    screenOptions: {\n      headerShown: false,\n      gestureEnabled: true\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(Stack.Screen, {\n    name: \"login\",\n    component: _screens.LoginScreen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }), _react.default.createElement(Stack.Screen, {\n    name: \"register\",\n    component: _screens.RegisterScreen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/isaacweber/code/SofamApp/app/navigation/auth-navigator.tsx"],"names":["Stack","AuthNavigator","headerShown","gestureEnabled","LoginScreen","RegisterScreen"],"mappings":";;;;;;;AAMA;;AACA;;AACA;;;AAoBA,IAAMA,KAAK,GAAG,kCAAd;;AAEO,SAASC,aAAT,GAAyB;AAC9B,SACE,6BAAC,KAAD,CAAO,SAAP;AACE,IAAA,aAAa,EAAE;AACbC,MAAAA,WAAW,EAAE,KADA;AAEbC,MAAAA,cAAc,EAAE;AAFH,KADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME,6BAAC,KAAD,CAAO,MAAP;AAAc,IAAA,IAAI,EAAC,OAAnB;AAA2B,IAAA,SAAS,EAAEC,oBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,EAOE,6BAAC,KAAD,CAAO,MAAP;AAAc,IAAA,IAAI,EAAC,UAAnB;AAA8B,IAAA,SAAS,EAAEC,uBAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CADF;AAWD","sourcesContent":["/**\n * This is the navigator you will modify to display the logged-in screens of your app.\n * You can use RootNavigator to also display an auth flow or other user flows.\n *\n * You'll likely spend most of your time in this file.\n */\nimport React from \"react\"\nimport { createStackNavigator } from \"@react-navigation/stack\"\nimport { LoginScreen, RegisterScreen } from \"../screens\"\n\n/**\n * This type allows TypeScript to know what routes are defined in this navigator\n * as well as what properties (if any) they might take when navigating to them.\n *\n * If no params are allowed, pass through `undefined`. Generally speaking, we\n * recommend using your MobX-State-Tree store(s) to keep application state\n * rather than passing state through navigation params.\n *\n * For more information, see this documentation:\n *   https://reactnavigation.org/docs/params/\n *   https://reactnavigation.org/docs/typescript#type-checking-the-navigator\n */\nexport type AuthParamList = {\n  login: undefined,\n  register: undefined\n}\n\n// Documentation: https://reactnavigation.org/docs/stack-navigator/\nconst Stack = createStackNavigator<AuthParamList>()\n\nexport function AuthNavigator() {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n        gestureEnabled: true,\n      }}\n    >\n      <Stack.Screen name=\"login\" component={LoginScreen} />\n      <Stack.Screen name=\"register\" component={RegisterScreen} />\n    </Stack.Navigator>\n  )\n}\n"]},"metadata":{},"sourceType":"script"}