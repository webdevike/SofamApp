{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AddStoryScreen = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _taggedTemplateLiteralLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/taggedTemplateLiteralLoose\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _client = require(\"@apollo/client\");\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _components = require(\"../components\");\n\nvar _theme = require(\"../theme\");\n\nvar _storage = require(\"../utils/storage\");\n\nvar _apolloUploadClient = require(\"apollo-upload-client\");\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _uploadImage = require(\"../utils/uploadImage\");\n\nvar _jsxFileName = \"/Users/isaacweber/code/SofamApp/app/screens/add-story-screen.tsx\";\n\nfunction _templateObject2() {\n  var data = (0, _taggedTemplateLiteralLoose2.default)([\"\\n{\\n  users {\\n    id\\n    name\\n    stories {\\n      id\\n      url\\n    }\\n  }\\n}\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = (0, _taggedTemplateLiteralLoose2.default)([\"\\nmutation createStory($file: Upload!) {\\n  createStory(file: $file) {\\n    id\\n    url\\n    signedRequest\\n  }\\n}\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar ROOT = {\n  backgroundColor: _theme.color.palette.white,\n  flex: 1\n};\nvar TEXT = {\n  color: _theme.color.palette.black,\n  fontFamily: _theme.typography.primary\n};\n\nvar TEXT_INPUT = _objectSpread({\n  paddingVertical: _theme.spacing[4],\n  paddingHorizontal: _theme.spacing[4],\n  marginBottom: _theme.spacing[5],\n  borderRadius: 50\n}, TEXT);\n\nvar IMAGE_WITH_STORY = {\n  flex: 1\n};\nvar LOGIN_BUTTON = {\n  paddingVertical: _theme.spacing[4],\n  paddingHorizontal: _theme.spacing[4],\n  backgroundColor: _theme.color.palette.black,\n  borderRadius: 50\n};\n\nvar LOGIN_BUTTON_TEXT = _objectSpread(_objectSpread({}, TEXT), {}, {\n  fontSize: 14,\n  color: _theme.color.palette.white,\n  letterSpacing: 2\n});\n\nvar CREATE_STORY = (0, _client.gql)(_templateObject());\nvar USERS = (0, _client.gql)(_templateObject2());\n\nvar AddStoryScreen = function AddStoryScreen(props) {\n  var _useState = (0, _react.useState)({}),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      fileData = _useState2[0],\n      setFileData = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(\"\"),\n      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n      title = _useState4[0],\n      setTitle = _useState4[1];\n\n  var _useState5 = (0, _react.useState)(\"\"),\n      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),\n      location = _useState6[0],\n      setLocation = _useState6[1];\n\n  var _useMutation = (0, _client.useMutation)(CREATE_STORY),\n      _useMutation2 = (0, _slicedToArray2.default)(_useMutation, 1),\n      createStory = _useMutation2[0];\n\n  var navigation = (0, _native.useNavigation)();\n  (0, _react.useEffect)(function () {\n    ;\n\n    (function _callee() {\n      var fileObject;\n      return _regenerator.default.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regenerator.default.awrap((0, _storage.load)(\"@fileObject\"));\n\n            case 2:\n              fileObject = _context.sent;\n              setFileData(fileObject);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var handleCreateStory = function handleCreateStory() {\n    var filename, file, _await$createStory, data;\n\n    return _regenerator.default.async(function handleCreateStory$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            navigation.navigate('home');\n            filename = fileData.uri.split('/').pop();\n            file = new _apolloUploadClient.ReactNativeFile({\n              uri: fileData.uri,\n              name: filename,\n              type: fileData.type\n            });\n            _context2.next = 5;\n            return _regenerator.default.awrap(createStory({\n              variables: {\n                url: file.uri,\n                file: file\n              },\n              optimisticResponse: {\n                __typename: 'Mutation',\n                createStory: {\n                  __typename: \"User\",\n                  id: 5,\n                  name: 'Isaac',\n                  stories: [{\n                    id: Math.round(Math.random() * -1000000),\n                    url: \"https://api.adorable.io/avatars/285/abott@adorable.png\"\n                  }]\n                }\n              }\n            }));\n\n          case 5:\n            _await$createStory = _context2.sent;\n            data = _await$createStory.data;\n            (0, _uploadImage.uploadImage)(file, data.createStory.signedRequest);\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _react.default.createElement(_reactNative.View, {\n    style: ROOT,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(_reactNative.Image, {\n    style: IMAGE_WITH_STORY,\n    source: {\n      uri: fileData == null ? void 0 : fileData.uri\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }), _react.default.createElement(_components.FormRow, {\n    preset: \"top\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, _react.default.createElement(_components.Button, {\n    style: LOGIN_BUTTON,\n    textStyle: LOGIN_BUTTON_TEXT,\n    text: \"Create Memory\",\n    onPress: handleCreateStory,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  })));\n};\n\nexports.AddStoryScreen = AddStoryScreen;","map":{"version":3,"sources":["/Users/isaacweber/code/SofamApp/app/screens/add-story-screen.tsx"],"names":["ROOT","backgroundColor","color","palette","white","flex","TEXT","black","fontFamily","typography","primary","TEXT_INPUT","paddingVertical","spacing","paddingHorizontal","marginBottom","borderRadius","IMAGE_WITH_STORY","LOGIN_BUTTON","LOGIN_BUTTON_TEXT","fontSize","letterSpacing","CREATE_STORY","gql","USERS","AddStoryScreen","props","fileData","setFileData","title","setTitle","location","setLocation","createStory","navigation","fileObject","handleCreateStory","navigate","filename","uri","split","pop","file","ReactNativeFile","name","type","variables","url","optimisticResponse","__typename","id","stories","Math","round","random","data","signedRequest"],"mappings":"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","sourcesContent":["import { gql, useMutation } from \"@apollo/client\"\nimport React, { FunctionComponent as Component, useEffect, useState } from \"react\"\n// import { observer } from \"mobx-react-lite\"\nimport { Image, ImageStyle, TextInput, TextStyle, View, ViewStyle } from \"react-native\"\nimport { FormRow, Button } from \"../components\"\nimport { color, spacing, typography } from \"../theme\"\nimport { load } from \"../utils/storage\"\nimport { ReactNativeFile } from 'apollo-upload-client'\nimport { useNavigation, } from \"@react-navigation/native\"\nimport { uploadImage } from \"../utils/uploadImage\"\n\nconst ROOT: ViewStyle = {\n  backgroundColor: color.palette.white,\n  flex: 1\n}\n\nconst TEXT: TextStyle = {\n  color: color.palette.black,\n  fontFamily: typography.primary,\n}\n\nconst TEXT_INPUT: ViewStyle = {\n  paddingVertical: spacing[4],\n  paddingHorizontal: spacing[4],\n  marginBottom: spacing[5],\n  borderRadius: 50,\n  ...TEXT\n}\n\nconst IMAGE_WITH_STORY: ImageStyle = {\n  flex: 1,\n}\n\nconst LOGIN_BUTTON: ViewStyle = {\n  paddingVertical: spacing[4],\n  paddingHorizontal: spacing[4],\n  backgroundColor: color.palette.black,\n  borderRadius: 50,\n}\n\nconst LOGIN_BUTTON_TEXT: TextStyle = {\n  ...TEXT,\n  fontSize: 14,\n  color: color.palette.white,\n  letterSpacing: 2,\n}\n\nconst CREATE_STORY = gql`\nmutation createStory($file: Upload!) {\n  createStory(file: $file) {\n    id\n    url\n    signedRequest\n  }\n}`\n\nconst USERS = gql`\n{\n  users {\n    id\n    name\n    stories {\n      id\n      url\n    }\n  }\n}\n`\nexport const AddStoryScreen: Component = function AddStoryScreen(props) {\n  const [fileData, setFileData] = useState({})\n  const [title, setTitle] = useState(\"\")\n  const [location, setLocation] = useState(\"\")\n  const [createStory] = useMutation(CREATE_STORY)\n  const navigation = useNavigation()\n  useEffect(() => {\n    ; (async () => {\n      const fileObject = await load(\"@fileObject\")\n      // the file that was chosen from the pickImage function\n      setFileData(fileObject)\n    })()\n  }, [])\n\n  const handleCreateStory = async () => {\n    navigation.navigate('home')\n    const filename = fileData.uri.split('/').pop()\n\n    const file = new ReactNativeFile({\n      uri: fileData.uri,\n      name: filename,\n      type: fileData.type\n    })\n\n    const { data } = await createStory({\n      variables: {\n        url: file.uri,\n        file\n      },\n      optimisticResponse: {\n        __typename: 'Mutation',\n        createStory: {\n          __typename: \"User\",\n          id: 5,\n          name: 'Isaac',\n          stories: [\n            {\n              id: Math.round(Math.random() * -1000000),\n              url: \"https://api.adorable.io/avatars/285/abott@adorable.png\",\n            }\n          ]\n        }\n      },\n      // update: (proxy, { data: { createStory } }) => {\n      //   const data = proxy.readQuery({ query: USERS })\n      //   console.log(\"handleCreateStory -> data\", data)\n      //   proxy.writeQuery({\n      //     query: USERS,\n      //     data: {\n      //       users: [...data.users, createStory]\n      //     }\n      //   })\n      // }\n    })\n    uploadImage(file, data.createStory.signedRequest)\n  }\n  return (\n    <View style={ROOT} >\n      <Image style={IMAGE_WITH_STORY} source={{ uri: fileData?.uri }} />\n      <FormRow preset=\"top\">\n        <Button\n          style={LOGIN_BUTTON}\n          textStyle={LOGIN_BUTTON_TEXT}\n          text=\"Create Memory\"\n          onPress={handleCreateStory}\n        />\n      </FormRow>\n    </View>\n  )\n}\n"]},"metadata":{},"sourceType":"script"}