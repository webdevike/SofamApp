{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = interpolate;\nexports.Extrapolate = void 0;\n\nvar _operators = require(\"../operators\");\n\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\n\nvar _AnimatedNode = _interopRequireDefault(require(\"../core/AnimatedNode\"));\n\nvar _AnimatedCond = require(\"../core/AnimatedCond\");\n\nvar _AnimatedFunction = require(\"../core/AnimatedFunction\");\n\nvar interpolateInternalSingleProc = (0, _AnimatedFunction.createAnimatedFunction)(function (value, inS, inE, outS, outE) {\n  var progress = (0, _operators.divide)((0, _operators.sub)(value, inS), (0, _operators.sub)(inE, inS));\n  var resultForNonZeroRange = (0, _operators.add)(outS, (0, _operators.multiply)(progress, (0, _operators.sub)(outE, outS)));\n  var result = (0, _AnimatedCond.createAnimatedCond)((0, _operators.eq)(inS, inE), (0, _AnimatedCond.createAnimatedCond)((0, _operators.lessOrEq)(value, inS), outS, outE), resultForNonZeroRange);\n  return result;\n});\n\nfunction interpolateInternalSingle(value, inputRange, outputRange, offset) {\n  var inS = inputRange[offset];\n  var inE = inputRange[offset + 1];\n  var outS = outputRange[offset];\n  var outE = outputRange[offset + 1];\n  return interpolateInternalSingleProc(value, inS, inE, outS, outE);\n}\n\nfunction interpolateInternal(value, inputRange, outputRange) {\n  var offset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n  if (inputRange.length - offset === 2) {\n    return interpolateInternalSingle(value, inputRange, outputRange, offset);\n  }\n\n  return (0, _AnimatedCond.createAnimatedCond)((0, _operators.lessThan)(value, inputRange[offset + 1]), interpolateInternalSingle(value, inputRange, outputRange, offset), interpolateInternal(value, inputRange, outputRange, offset + 1));\n}\n\nvar Extrapolate = {\n  EXTEND: 'extend',\n  CLAMP: 'clamp',\n  IDENTITY: 'identity'\n};\nexports.Extrapolate = Extrapolate;\n\nfunction checkNonDecreasing(name, arr) {\n  for (var i = 1; i < arr.length; ++i) {\n    if (arr[i] instanceof _AnimatedNode.default || arr[i - 1] instanceof _AnimatedNode.default) continue;\n    (0, _invariant.default)(arr[i] >= arr[i - 1], '%s must be monotonically non-decreasing. (%s)', name, arr);\n  }\n}\n\nfunction checkMinElements(name, arr) {\n  (0, _invariant.default)(arr.length >= 2, '%s must have at least 2 elements. (%s)', name, arr);\n}\n\nfunction checkValidNumbers(name, arr) {\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i] instanceof _AnimatedNode.default) continue;\n    (0, _invariant.default)(Number.isFinite(arr[i]), '%s cannot include %s. (%s)', name, arr[i], arr);\n  }\n}\n\nfunction interpolate(value, config) {\n  var inputRange = config.inputRange,\n      outputRange = config.outputRange,\n      _config$extrapolate = config.extrapolate,\n      extrapolate = _config$extrapolate === void 0 ? Extrapolate.EXTEND : _config$extrapolate,\n      extrapolateLeft = config.extrapolateLeft,\n      extrapolateRight = config.extrapolateRight;\n  checkMinElements('inputRange', inputRange);\n  checkValidNumbers('inputRange', inputRange);\n  checkMinElements('outputRange', outputRange);\n  checkValidNumbers('outputRange', outputRange);\n  checkNonDecreasing('inputRange', inputRange);\n  (0, _invariant.default)(inputRange.length === outputRange.length, 'inputRange and outputRange must be the same length.');\n  var left = extrapolateLeft || extrapolate;\n  var right = extrapolateRight || extrapolate;\n  var output = interpolateInternal(value, inputRange, outputRange);\n\n  if (left === Extrapolate.EXTEND) {} else if (left === Extrapolate.CLAMP) {\n    output = (0, _AnimatedCond.createAnimatedCond)((0, _operators.lessThan)(value, inputRange[0]), outputRange[0], output);\n  } else if (left === Extrapolate.IDENTITY) {\n    output = (0, _AnimatedCond.createAnimatedCond)((0, _operators.lessThan)(value, inputRange[0]), value, output);\n  }\n\n  if (right === Extrapolate.EXTEND) {} else if (right === Extrapolate.CLAMP) {\n    output = (0, _AnimatedCond.createAnimatedCond)((0, _operators.greaterThan)(value, inputRange[inputRange.length - 1]), outputRange[outputRange.length - 1], output);\n  } else if (right === Extrapolate.IDENTITY) {\n    output = (0, _AnimatedCond.createAnimatedCond)((0, _operators.greaterThan)(value, inputRange[inputRange.length - 1]), value, output);\n  }\n\n  return output;\n}","map":{"version":3,"sources":["/Users/isaacweber/code/SofamApp/node_modules/react-native-reanimated/src/derived/interpolate.js"],"names":["interpolateInternalSingleProc","value","inS","inE","outS","outE","progress","resultForNonZeroRange","result","interpolateInternalSingle","inputRange","outputRange","offset","interpolateInternal","length","Extrapolate","EXTEND","CLAMP","IDENTITY","checkNonDecreasing","name","arr","i","AnimatedNode","checkMinElements","checkValidNumbers","Number","isFinite","interpolate","config","extrapolate","extrapolateLeft","extrapolateRight","left","right","output"],"mappings":"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","sourcesContent":["import {\n  lessThan,\n  multiply,\n  sub,\n  add,\n  divide,\n  greaterThan,\n  lessOrEq,\n  eq,\n} from '../operators';\nimport invariant from 'fbjs/lib/invariant';\n\nimport AnimatedNode from '../core/AnimatedNode';\nimport { createAnimatedCond as cond } from '../core/AnimatedCond';\nimport { createAnimatedFunction as proc } from '../core/AnimatedFunction';\n\nconst interpolateInternalSingleProc = proc(function(\n  value,\n  inS,\n  inE,\n  outS,\n  outE\n) {\n  const progress = divide(sub(value, inS), sub(inE, inS));\n  // logic below was made in order to provide a compatibility witn an Animated API\n  const resultForNonZeroRange = add(outS, multiply(progress, sub(outE, outS)));\n  const result = cond(eq(inS, inE), cond(lessOrEq(value, inS), outS, outE), resultForNonZeroRange);\n  return result;\n});\n\nfunction interpolateInternalSingle(value, inputRange, outputRange, offset) {\n  const inS = inputRange[offset];\n  const inE = inputRange[offset + 1];\n  const outS = outputRange[offset];\n  const outE = outputRange[offset + 1];\n  return interpolateInternalSingleProc(value, inS, inE, outS, outE);\n}\n\nfunction interpolateInternal(value, inputRange, outputRange, offset = 0) {\n  if (inputRange.length - offset === 2) {\n    return interpolateInternalSingle(value, inputRange, outputRange, offset);\n  }\n  return cond(\n    lessThan(value, inputRange[offset + 1]),\n    interpolateInternalSingle(value, inputRange, outputRange, offset),\n    interpolateInternal(value, inputRange, outputRange, offset + 1)\n  );\n}\n\nexport const Extrapolate = {\n  EXTEND: 'extend',\n  CLAMP: 'clamp',\n  IDENTITY: 'identity',\n};\n\nfunction checkNonDecreasing(name, arr) {\n  for (let i = 1; i < arr.length; ++i) {\n    // We can't validate animated nodes in JS.\n    if (arr[i] instanceof AnimatedNode || arr[i - 1] instanceof AnimatedNode)\n      continue;\n    invariant(\n      arr[i] >= arr[i - 1],\n      '%s must be monotonically non-decreasing. (%s)',\n      name,\n      arr\n    );\n  }\n}\n\nfunction checkMinElements(name, arr) {\n  invariant(\n    arr.length >= 2,\n    '%s must have at least 2 elements. (%s)',\n    name,\n    arr\n  );\n}\n\nfunction checkValidNumbers(name, arr) {\n  for (let i = 0; i < arr.length; i++) {\n    // We can't validate animated nodes in JS.\n    if (arr[i] instanceof AnimatedNode) continue;\n    invariant(\n      Number.isFinite(arr[i]),\n      '%s cannot include %s. (%s)',\n      name,\n      arr[i],\n      arr\n    );\n  }\n}\n\nexport default function interpolate(value, config) {\n  const {\n    inputRange,\n    outputRange,\n    extrapolate = Extrapolate.EXTEND,\n    extrapolateLeft,\n    extrapolateRight,\n  } = config;\n  checkMinElements('inputRange', inputRange);\n  checkValidNumbers('inputRange', inputRange);\n  checkMinElements('outputRange', outputRange);\n  checkValidNumbers('outputRange', outputRange);\n  checkNonDecreasing('inputRange', inputRange);\n  invariant(\n    inputRange.length === outputRange.length,\n    'inputRange and outputRange must be the same length.'\n  );\n\n  const left = extrapolateLeft || extrapolate;\n  const right = extrapolateRight || extrapolate;\n  let output = interpolateInternal(value, inputRange, outputRange);\n\n  if (left === Extrapolate.EXTEND) {\n  } else if (left === Extrapolate.CLAMP) {\n    output = cond(lessThan(value, inputRange[0]), outputRange[0], output);\n  } else if (left === Extrapolate.IDENTITY) {\n    output = cond(lessThan(value, inputRange[0]), value, output);\n  }\n\n  if (right === Extrapolate.EXTEND) {\n  } else if (right === Extrapolate.CLAMP) {\n    output = cond(\n      greaterThan(value, inputRange[inputRange.length - 1]),\n      outputRange[outputRange.length - 1],\n      output\n    );\n  } else if (right === Extrapolate.IDENTITY) {\n    output = cond(\n      greaterThan(value, inputRange[inputRange.length - 1]),\n      value,\n      output\n    );\n  }\n\n  return output;\n}\n"]},"metadata":{},"sourceType":"script"}