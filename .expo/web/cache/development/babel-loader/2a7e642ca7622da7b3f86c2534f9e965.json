{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = cancelAllScheduledNotificationsAsync;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _core = require(\"@unimodules/core\");\n\nvar _NotificationScheduler = _interopRequireDefault(require(\"./NotificationScheduler\"));\n\nfunction cancelAllScheduledNotificationsAsync() {\n  return _regenerator.default.async(function cancelAllScheduledNotificationsAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (_NotificationScheduler.default.cancelAllScheduledNotificationsAsync) {\n            _context.next = 2;\n            break;\n          }\n\n          throw new _core.UnavailabilityError('Notifications', 'cancelAllScheduledNotificationsAsync');\n\n        case 2:\n          _context.next = 4;\n          return _regenerator.default.awrap(_NotificationScheduler.default.cancelAllScheduledNotificationsAsync());\n\n        case 4:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../src/cancelAllScheduledNotificationsAsync.ts"],"names":[],"mappings":";;;;;;;;;AAAA;;AAEA;;AAEe,SAAe,oCAAf;AAAA;AAAA;AAAA;AAAA;AAAA,cACR,+BAAsB,oCADd;AAAA;AAAA;AAAA;;AAAA,gBAEL,IAAI,yBAAJ,CAAwB,eAAxB,EAAyC,sCAAzC,CAFK;;AAAA;AAAA;AAAA,4CAKA,+BAAsB,oCAAtB,EALA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\n\nimport NotificationScheduler from './NotificationScheduler';\n\nexport default async function cancelAllScheduledNotificationsAsync(): Promise<void> {\n  if (!NotificationScheduler.cancelAllScheduledNotificationsAsync) {\n    throw new UnavailabilityError('Notifications', 'cancelAllScheduledNotificationsAsync');\n  }\n\n  return await NotificationScheduler.cancelAllScheduledNotificationsAsync();\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}