{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.notification = notification;\nexports.impact = impact;\nexports.selection = selection;\nexports.notificationAsync = notificationAsync;\nexports.impactAsync = impactAsync;\nexports.selectionAsync = selectionAsync;\nObject.defineProperty(exports, \"NotificationFeedbackType\", {\n  enumerable: true,\n  get: function get() {\n    return _Haptics.NotificationFeedbackType;\n  }\n});\nObject.defineProperty(exports, \"ImpactFeedbackStyle\", {\n  enumerable: true,\n  get: function get() {\n    return _Haptics.ImpactFeedbackStyle;\n  }\n});\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _core = require(\"@unimodules/core\");\n\nvar _ExpoHaptics = _interopRequireDefault(require(\"./ExpoHaptics\"));\n\nvar _Haptics = require(\"./Haptics.types\");\n\nfunction notification() {\n  var type,\n      _args = arguments;\n  return _regenerator.default.async(function notification$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          type = _args.length > 0 && _args[0] !== undefined ? _args[0] : _Haptics.NotificationFeedbackType.Success;\n          console.warn('`Haptics.notification` is deprecated. Use `Haptics.notificationAsync` instead.');\n          _context.next = 4;\n          return _regenerator.default.awrap(notificationAsync(type));\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction impact() {\n  var style,\n      _args2 = arguments;\n  return _regenerator.default.async(function impact$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          style = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : _Haptics.ImpactFeedbackStyle.Medium;\n          console.warn('`Haptics.impact` is deprecated. Use `Haptics.impactAsync` instead.');\n          _context2.next = 4;\n          return _regenerator.default.awrap(impactAsync(style));\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction selection() {\n  return _regenerator.default.async(function selection$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          console.warn('`Haptics.selection` is deprecated. Use `Haptics.selectionAsync` instead.');\n          _context3.next = 3;\n          return _regenerator.default.awrap(selectionAsync());\n\n        case 3:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction notificationAsync() {\n  var type,\n      _args4 = arguments;\n  return _regenerator.default.async(function notificationAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          type = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : _Haptics.NotificationFeedbackType.Success;\n\n          if (_ExpoHaptics.default.notificationAsync) {\n            _context4.next = 3;\n            break;\n          }\n\n          throw new _core.UnavailabilityError('Haptics', 'notificationAsync');\n\n        case 3:\n          _context4.next = 5;\n          return _regenerator.default.awrap(_ExpoHaptics.default.notificationAsync(type));\n\n        case 5:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction impactAsync() {\n  var style,\n      _args5 = arguments;\n  return _regenerator.default.async(function impactAsync$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          style = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : _Haptics.ImpactFeedbackStyle.Medium;\n\n          if (_ExpoHaptics.default.impactAsync) {\n            _context5.next = 3;\n            break;\n          }\n\n          throw new _core.UnavailabilityError('Haptic', 'impactAsync');\n\n        case 3:\n          _context5.next = 5;\n          return _regenerator.default.awrap(_ExpoHaptics.default.impactAsync(style));\n\n        case 5:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction selectionAsync() {\n  return _regenerator.default.async(function selectionAsync$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          if (_ExpoHaptics.default.selectionAsync) {\n            _context6.next = 2;\n            break;\n          }\n\n          throw new _core.UnavailabilityError('Haptic', 'selectionAsync');\n\n        case 2:\n          _context6.next = 4;\n          return _regenerator.default.awrap(_ExpoHaptics.default.selectionAsync());\n\n        case 4:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../src/Haptics.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AACA;;AAEO,SAAe,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,UAAA,IADK,2DAC4B,kCAAyB,OADrD;AAGL,UAAA,OAAO,CAAC,IAAR,CAAa,gFAAb;AAHK;AAAA,4CAIC,iBAAiB,CAAC,IAAD,CAJlB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOA,SAAe,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,UAAA,KADK,8DACwB,6BAAoB,MAD5C;AAGL,UAAA,OAAO,CAAC,IAAR,CAAa,oEAAb;AAHK;AAAA,4CAIC,WAAW,CAAC,KAAD,CAJZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOA,SAAe,SAAf;AAAA;AAAA;AAAA;AAAA;AACL,UAAA,OAAO,CAAC,IAAR,CAAa,0EAAb;AADK;AAAA,4CAEC,cAAc,EAFf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,SAAe,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,UAAA,IADK,8DAC4B,kCAAyB,OADrD;;AAAA,cAGA,qBAAY,iBAHZ;AAAA;AAAA;AAAA;;AAAA,gBAIG,IAAI,yBAAJ,CAAwB,SAAxB,EAAmC,mBAAnC,CAJH;;AAAA;AAAA;AAAA,4CAMC,qBAAY,iBAAZ,CAA8B,IAA9B,CAND;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYA,SAAe,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,UAAA,KADK,8DACwB,6BAAoB,MAD5C;;AAAA,cAGA,qBAAY,WAHZ;AAAA;AAAA;AAAA;;AAAA,gBAIG,IAAI,yBAAJ,CAAwB,QAAxB,EAAkC,aAAlC,CAJH;;AAAA;AAAA;AAAA,4CAMC,qBAAY,WAAZ,CAAwB,KAAxB,CAND;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYA,SAAe,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA,cACA,qBAAY,cADZ;AAAA;AAAA;AAAA;;AAAA,gBAEG,IAAI,yBAAJ,CAAwB,QAAxB,EAAkC,gBAAlC,CAFH;;AAAA;AAAA;AAAA,4CAIC,qBAAY,cAAZ,EAJD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\n\nimport ExpoHaptics from './ExpoHaptics';\nimport { NotificationFeedbackType, ImpactFeedbackStyle } from './Haptics.types';\n\nexport async function notification(\n  type: NotificationFeedbackType = NotificationFeedbackType.Success\n): Promise<void> {\n  console.warn('`Haptics.notification` is deprecated. Use `Haptics.notificationAsync` instead.');\n  await notificationAsync(type);\n}\n\nexport async function impact(\n  style: ImpactFeedbackStyle = ImpactFeedbackStyle.Medium\n): Promise<void> {\n  console.warn('`Haptics.impact` is deprecated. Use `Haptics.impactAsync` instead.');\n  await impactAsync(style);\n}\n\nexport async function selection(): Promise<void> {\n  console.warn('`Haptics.selection` is deprecated. Use `Haptics.selectionAsync` instead.');\n  await selectionAsync();\n}\n\n/**\n * Triggers notification feedback.\n */\nexport async function notificationAsync(\n  type: NotificationFeedbackType = NotificationFeedbackType.Success\n): Promise<void> {\n  if (!ExpoHaptics.notificationAsync) {\n    throw new UnavailabilityError('Haptics', 'notificationAsync');\n  }\n  await ExpoHaptics.notificationAsync(type);\n}\n\n/**\n * Triggers impact feedback.\n */\nexport async function impactAsync(\n  style: ImpactFeedbackStyle = ImpactFeedbackStyle.Medium\n): Promise<void> {\n  if (!ExpoHaptics.impactAsync) {\n    throw new UnavailabilityError('Haptic', 'impactAsync');\n  }\n  await ExpoHaptics.impactAsync(style);\n}\n\n/**\n * Triggers selection feedback.\n */\nexport async function selectionAsync(): Promise<void> {\n  if (!ExpoHaptics.selectionAsync) {\n    throw new UnavailabilityError('Haptic', 'selectionAsync');\n  }\n  await ExpoHaptics.selectionAsync();\n}\n\nexport { NotificationFeedbackType, ImpactFeedbackStyle };\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}