{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RootNavigator = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _taggedTemplateLiteralLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/taggedTemplateLiteralLoose\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _stack = require(\"@react-navigation/stack\");\n\nvar _primaryNavigator = require(\"./primary-navigator\");\n\nvar _authNavigator = require(\"./auth-navigator\");\n\nvar _client = require(\"@apollo/client\");\n\nvar _screens = require(\"../screens\");\n\nvar _jsxFileName = \"/Users/isaacweber/code/SofamApp/app/navigation/root-navigator.tsx\";\n\nfunction _templateObject() {\n  var data = (0, _taggedTemplateLiteralLoose2.default)([\"\\n  {\\n    isLoggedIn @client\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nvar Stack = (0, _stack.createStackNavigator)();\nvar IS_LOGGED_IN = (0, _client.gql)(_templateObject());\n\nvar RootStack = function RootStack() {\n  return _react.default.createElement(Stack.Navigator, {\n    screenOptions: {\n      headerShown: false,\n      gestureEnabled: true\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(Stack.Screen, {\n    name: \"primaryStack\",\n    component: _primaryNavigator.PrimaryNavigator,\n    options: {\n      headerShown: false\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }), _react.default.createElement(Stack.Screen, {\n    name: \"story\",\n    component: _screens.StoryScreen,\n    options: {\n      headerShown: false\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar AuthStack = function AuthStack() {\n  return _react.default.createElement(Stack.Navigator, {\n    screenOptions: {\n      headerShown: false,\n      gestureEnabled: true\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(Stack.Screen, {\n    name: \"authStack\",\n    component: _authNavigator.AuthNavigator,\n    options: {\n      headerShown: false\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar RootNavigator = _react.default.forwardRef(function (props, ref) {\n  var _useQuery = (0, _client.useQuery)(IS_LOGGED_IN),\n      data = _useQuery.data;\n\n  var user = data == null ? void 0 : data.isLoggedIn;\n  return _react.default.createElement(_native.NavigationContainer, (0, _extends2.default)({}, props, {\n    ref: ref,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }), user ? _react.default.createElement(RootStack, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 15\n    }\n  }) : _react.default.createElement(AuthStack, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 31\n    }\n  }));\n});\n\nexports.RootNavigator = RootNavigator;\nRootNavigator.displayName = \"RootNavigator\";","map":{"version":3,"sources":["/Users/isaacweber/code/SofamApp/app/navigation/root-navigator.tsx"],"names":["Stack","IS_LOGGED_IN","gql","RootStack","headerShown","gestureEnabled","PrimaryNavigator","StoryScreen","AuthStack","AuthNavigator","RootNavigator","React","forwardRef","props","ref","data","user","isLoggedIn","displayName"],"mappings":";;;;;;;;;;;AAMA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAiBA,IAAMA,KAAK,GAAG,kCAAd;AAEA,IAAMC,YAAY,OAAGC,WAAH,oBAAlB;;AAMA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AACtB,SACE,6BAAC,KAAD,CAAO,SAAP;AACE,IAAA,aAAa,EAAE;AACbC,MAAAA,WAAW,EAAE,KADA;AAEbC,MAAAA,cAAc,EAAE;AAFH,KADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME,6BAAC,KAAD,CAAO,MAAP;AACE,IAAA,IAAI,EAAC,cADP;AAEE,IAAA,SAAS,EAAEC,kCAFb;AAGE,IAAA,OAAO,EAAE;AACPF,MAAAA,WAAW,EAAE;AADN,KAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,EAaE,6BAAC,KAAD,CAAO,MAAP;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,SAAS,EAAEG,oBAFb;AAGE,IAAA,OAAO,EAAE;AACPH,MAAAA,WAAW,EAAE;AADN,KAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbF,CADF;AAuBD,CAxBD;;AA0BA,IAAMI,SAAS,GAAG,SAAZA,SAAY,GAAM;AACtB,SACE,6BAAC,KAAD,CAAO,SAAP;AACE,IAAA,aAAa,EAAE;AACbJ,MAAAA,WAAW,EAAE,KADA;AAEbC,MAAAA,cAAc,EAAE;AAFH,KADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME,6BAAC,KAAD,CAAO,MAAP;AACE,IAAA,IAAI,EAAC,WADP;AAEE,IAAA,SAAS,EAAEI,4BAFb;AAGE,IAAA,OAAO,EAAE;AACPL,MAAAA,WAAW,EAAE;AADN,KAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADF;AAgBD,CAjBD;;AAmBO,IAAMM,aAAa,GAAGC,eAAMC,UAAN,CAAoG,UAACC,KAAD,EAAQC,GAAR,EAAgB;AAAA,kBAC9H,sBAASb,YAAT,CAD8H;AAAA,MACvIc,IADuI,aACvIA,IADuI;;AAG/I,MAAMC,IAAI,GAAGD,IAAH,oBAAGA,IAAI,CAAEE,UAAnB;AAEA,SACE,6BAAC,2BAAD,6BAAyBJ,KAAzB;AAAgC,IAAA,GAAG,EAAEC,GAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACGE,IAAI,GAAG,6BAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAmB,6BAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAD1B,CADF;AAKD,CAV4B,CAAtB;;;AAYPN,aAAa,CAACQ,WAAd,GAA4B,eAA5B","sourcesContent":["/**\n * The root navigator is used to switch between major navigation flows of your app.\n * Generally speaking, it will contain an auth flow (registration, login, forgot password)\n * and a \"main\" flow (which is contained in your PrimaryNavigator) which the user\n * will use once logged in.\n */\nimport React from \"react\"\nimport { NavigationContainer, NavigationContainerRef } from \"@react-navigation/native\"\n\nimport { createStackNavigator } from \"@react-navigation/stack\"\nimport { PrimaryNavigator } from \"./primary-navigator\"\nimport { AuthNavigator } from \"./auth-navigator\"\nimport { gql, useQuery } from \"@apollo/client\"\nimport { StoryScreen } from \"../screens\"\n\n/**\n * This type allows TypeScript to know what routes are defined in this navigator\n * as well as what properties (if any) they might take when navigating to them.\n *\n * We recommend using MobX-State-Tree store(s) to handle state rather than navigation params.\n *\n * For more information, see this documentation:\n *   https://reactnavigation.org/docs/params/\n *   https://reactnavigation.org/docs/typescript#type-checking-the-navigator\n */\nexport type RootParamList = {\n  primaryStack: undefined\n  authStack: undefined\n}\n\nconst Stack = createStackNavigator<RootParamList>()\n\nconst IS_LOGGED_IN = gql`\n  {\n    isLoggedIn @client\n  }\n`\n\nconst RootStack = () => {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n        gestureEnabled: true,\n      }}\n    >\n      <Stack.Screen\n        name=\"primaryStack\"\n        component={PrimaryNavigator}\n        options={{\n          headerShown: false,\n        }}\n      />\n      <Stack.Screen\n        name=\"story\"\n        component={StoryScreen}\n        options={{\n          headerShown: false,\n        }}\n      />\n    </Stack.Navigator>\n  )\n}\n\nconst AuthStack = () => {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n        gestureEnabled: true,\n      }}\n    >\n      <Stack.Screen\n        name=\"authStack\"\n        component={AuthNavigator}\n        options={{\n          headerShown: false,\n        }}\n      />\n    </Stack.Navigator>\n  )\n}\n\nexport const RootNavigator = React.forwardRef<NavigationContainerRef, Partial<React.ComponentProps<typeof NavigationContainer>>>((props, ref) => {\n  const { data } = useQuery(IS_LOGGED_IN)\n\n  const user = data?.isLoggedIn\n\n  return (\n    <NavigationContainer {...props} ref={ref}>\n      {user ? <RootStack /> : <AuthStack />}\n    </NavigationContainer>\n  )\n})\n\nRootNavigator.displayName = \"RootNavigator\"\n"]},"metadata":{},"sourceType":"script"}