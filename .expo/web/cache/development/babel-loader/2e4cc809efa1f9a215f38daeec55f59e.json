{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar badgin = _interopRequireWildcard(require(\"badgin\"));\n\nvar lastSetBadgeCount = 0;\nvar _default = {\n  addListener: function addListener() {},\n  removeListeners: function removeListeners() {},\n  getBadgeCountAsync: function getBadgeCountAsync() {\n    return _regenerator.default.async(function getBadgeCountAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", lastSetBadgeCount);\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  setBadgeCountAsync: function setBadgeCountAsync(badgeCount, options) {\n    return _regenerator.default.async(function setBadgeCountAsync$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (badgeCount > 0) {\n              badgin.set(badgeCount, options);\n            } else {\n              badgin.clear();\n            }\n\n            lastSetBadgeCount = badgeCount;\n            return _context2.abrupt(\"return\", true);\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};\nexports.default = _default;","map":{"version":3,"sources":["../src/BadgeModule.web.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA;;AAIA,IAAI,iBAAiB,GAAG,CAAxB;eAEe;AACb,EAAA,WAAW,EAAE,uBAAK,CAAG,CADR;AAEb,EAAA,eAAe,EAAE,2BAAK,CAAG,CAFZ;AAGb,EAAA,kBAAkB,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA,6CACX,iBADW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAHP;AAMb,EAAA,kBAAkB,EAAE,4BAAO,UAAP,EAA2B,OAA3B;AAAA;AAAA;AAAA;AAAA;AAClB,gBAAI,UAAU,GAAG,CAAjB,EAAoB;AAClB,cAAA,MAAM,CAAC,GAAP,CAAW,UAAX,EAAuB,OAAvB;AACD,aAFD,MAEO;AACL,cAAA,MAAM,CAAC,KAAP;AACD;;AACD,YAAA,iBAAiB,GAAG,UAApB;AANkB,8CAOX,IAPW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANP,C","sourcesContent":["import * as badgin from 'badgin';\n\nimport { BadgeModule } from './BadgeModule.types';\n\nlet lastSetBadgeCount = 0;\n\nexport default {\n  addListener: () => {},\n  removeListeners: () => {},\n  getBadgeCountAsync: async () => {\n    return lastSetBadgeCount;\n  },\n  setBadgeCountAsync: async (badgeCount: number, options?: badgin.Options) => {\n    if (badgeCount > 0) {\n      badgin.set(badgeCount, options);\n    } else {\n      badgin.clear();\n    }\n    lastSetBadgeCount = badgeCount;\n    return true;\n  },\n} as BadgeModule;\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}