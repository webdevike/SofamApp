{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ChatScreen = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _mobxReactLite = require(\"mobx-react-lite\");\n\nvar _reactNative = require(\"react-native\");\n\nvar _components = require(\"../components\");\n\nvar _app = require(\"../app\");\n\nvar _theme = require(\"../theme\");\n\nvar _firestore = require(\"react-firebase-hooks/firestore\");\n\nvar _firebase = _interopRequireDefault(require(\"firebase\"));\n\nvar _expoStatusBar = require(\"expo-status-bar\");\n\nvar Notifications = _interopRequireWildcard(require(\"expo-notifications\"));\n\nvar _expoConstants = _interopRequireDefault(require(\"expo-constants\"));\n\nvar Permissions = _interopRequireWildcard(require(\"expo-permissions\"));\n\nvar _jsxFileName = \"/Users/isaacweber/code/SofamApp/app/screens/chat-screen.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nNotifications.setNotificationHandler({\n  handleNotification: function handleNotification() {\n    return _regenerator.default.async(function handleNotification$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", {\n              shouldShowAlert: true,\n              shouldPlaySound: false,\n              shouldSetBadge: false\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n});\nvar ROOT = {\n  flex: 1\n};\nvar MESSAGES_CONTAINER = {\n  flex: 1,\n  flexDirection: \"column-reverse\"\n};\nvar MESSAGE = {\n  borderBottomWidth: 1,\n  borderColor: _theme.color.palette.lightGrey,\n  padding: _theme.spacing[4],\n  flexDirection: \"row\",\n  alignItems: \"center\"\n};\nvar TEXT = {\n  color: _theme.color.palette.black,\n  fontFamily: _theme.typography.primary,\n  marginLeft: _theme.spacing[4]\n};\nvar BUTTON_TEXT = {\n  color: _theme.color.palette.black,\n  fontFamily: _theme.typography.primary\n};\n\nvar TEXT_INPUT = _objectSpread({\n  paddingVertical: _theme.spacing[5],\n  paddingHorizontal: _theme.spacing[5],\n  backgroundColor: _theme.color.palette.lighterGrey\n}, BUTTON_TEXT);\n\nvar PROFILE_IMAGE = {\n  marginTop: 7,\n  height: 39,\n  width: 39,\n  borderRadius: 50\n};\nvar ChatScreen = (0, _mobxReactLite.observer)(function ChatScreen() {\n  var messagesRef = _app.firestore.collection('messages');\n\n  var query = messagesRef.orderBy('createdAt', 'desc').limit(25);\n\n  var _useCollectionData = (0, _firestore.useCollectionData)(query, {\n    idField: 'id'\n  }),\n      _useCollectionData2 = (0, _slicedToArray2.default)(_useCollectionData, 1),\n      messages = _useCollectionData2[0];\n\n  var _useState = (0, _react.useState)(''),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      formValue = _useState2[0],\n      setFormValue = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(''),\n      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n      expoPushToken = _useState4[0],\n      setExpoPushToken = _useState4[1];\n\n  var _useState5 = (0, _react.useState)(false),\n      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),\n      notification = _useState6[0],\n      setNotification = _useState6[1];\n\n  var notificationListener = (0, _react.useRef)();\n  var responseListener = (0, _react.useRef)();\n  var dummy = (0, _react.useRef)();\n  (0, _react.useEffect)(function () {\n    registerForPushNotificationsAsync().then(function (token) {\n      return setExpoPushToken(token);\n    });\n    notificationListener.current = Notifications.addNotificationReceivedListener(function (notification) {\n      setNotification(notification);\n    });\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(function (response) {\n      console.log(response);\n    });\n    return function () {\n      Notifications.removeNotificationSubscription(notificationListener);\n      Notifications.removeNotificationSubscription(responseListener);\n    };\n  }, []);\n\n  var sendMessage = function sendMessage(e) {\n    return _regenerator.default.async(function sendMessage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regenerator.default.awrap(schedulePushNotification());\n\n          case 2:\n            e.preventDefault();\n            _context2.next = 5;\n            return _regenerator.default.awrap(messagesRef.add({\n              text: formValue,\n              createdAt: _firebase.default.firestore.FieldValue.serverTimestamp()\n            }).catch(function (e) {\n              console.log(e);\n            }));\n\n          case 5:\n            setFormValue('');\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _react.default.createElement(_reactNative.SafeAreaView, {\n    style: ROOT,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(_reactNative.ScrollView, {\n    ref: function ref(_ref) {\n      scrollView = _ref;\n    },\n    onContentSizeChange: function onContentSizeChange() {\n      return scrollView.scrollToEnd({\n        animated: true\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, _react.default.createElement(_reactNative.View, {\n    style: MESSAGES_CONTAINER,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, messages == null ? void 0 : messages.map(function (msg) {\n    return _react.default.createElement(_reactNative.View, {\n      style: MESSAGE,\n      key: msg.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }\n    }, _react.default.createElement(_reactNative.Image, {\n      style: PROFILE_IMAGE,\n      source: {\n        uri: \"https://ui-avatars.com/api/?name=Isaac+Weber\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 15\n      }\n    }), _react.default.createElement(_components.Text, {\n      text: msg.text,\n      style: TEXT,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 15\n      }\n    }));\n  }))), _react.default.createElement(_reactNative.KeyboardAvoidingView, {\n    behavior: _reactNative.Platform.OS === 'ios' ? 'padding' : 'height',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, _react.default.createElement(_reactNative.TextInput, {\n    placeholderTextColor: _theme.color.palette.lightGrey,\n    style: TEXT_INPUT,\n    onChangeText: function onChangeText(text) {\n      return setFormValue(text);\n    },\n    value: formValue,\n    placeholder: \"Message\",\n    autoCapitalize: \"none\",\n    onSubmitEditing: sendMessage,\n    returnKeyType: \"send\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  })), _react.default.createElement(_expoStatusBar.StatusBar, {\n    style: \"dark\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }));\n});\nexports.ChatScreen = ChatScreen;\n\nfunction schedulePushNotification() {\n  return _regenerator.default.async(function schedulePushNotification$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regenerator.default.awrap(Notifications.scheduleNotificationAsync({\n            content: {\n              title: \"You've got mail! ðŸ“¬\",\n              body: 'Here is the notification body',\n              data: {\n                data: 'goes here'\n              }\n            },\n            trigger: {\n              seconds: 1\n            }\n          }));\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction registerForPushNotificationsAsync() {\n  var token, _await$Permissions$ge, existingStatus, finalStatus, _await$Permissions$as, status;\n\n  return _regenerator.default.async(function registerForPushNotificationsAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (!_expoConstants.default.isDevice) {\n            _context4.next = 21;\n            break;\n          }\n\n          _context4.next = 3;\n          return _regenerator.default.awrap(Permissions.getAsync(Permissions.NOTIFICATIONS));\n\n        case 3:\n          _await$Permissions$ge = _context4.sent;\n          existingStatus = _await$Permissions$ge.status;\n          finalStatus = existingStatus;\n\n          if (!(existingStatus !== 'granted')) {\n            _context4.next = 12;\n            break;\n          }\n\n          _context4.next = 9;\n          return _regenerator.default.awrap(Permissions.askAsync(Permissions.NOTIFICATIONS));\n\n        case 9:\n          _await$Permissions$as = _context4.sent;\n          status = _await$Permissions$as.status;\n          finalStatus = status;\n\n        case 12:\n          if (!(finalStatus !== 'granted')) {\n            _context4.next = 15;\n            break;\n          }\n\n          alert('Failed to get push token for push notification!');\n          return _context4.abrupt(\"return\");\n\n        case 15:\n          _context4.next = 17;\n          return _regenerator.default.awrap(Notifications.getExpoPushTokenAsync());\n\n        case 17:\n          token = _context4.sent.data;\n          console.log(token);\n          _context4.next = 22;\n          break;\n\n        case 21:\n          alert('Must use physical device for Push Notifications');\n\n        case 22:\n          if (_reactNative.Platform.OS === 'android') {\n            Notifications.setNotificationChannelAsync('default', {\n              name: 'default',\n              importance: Notifications.AndroidImportance.MAX,\n              vibrationPattern: [0, 250, 250, 250],\n              lightColor: '#FF231F7C'\n            });\n          }\n\n          return _context4.abrupt(\"return\", token);\n\n        case 24:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["/Users/isaacweber/code/SofamApp/app/screens/chat-screen.tsx"],"names":["Notifications","setNotificationHandler","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","ROOT","flex","MESSAGES_CONTAINER","flexDirection","MESSAGE","borderBottomWidth","borderColor","color","palette","lightGrey","padding","spacing","alignItems","TEXT","black","fontFamily","typography","primary","marginLeft","BUTTON_TEXT","TEXT_INPUT","paddingVertical","paddingHorizontal","backgroundColor","lighterGrey","PROFILE_IMAGE","marginTop","height","width","borderRadius","ChatScreen","messagesRef","firestore","collection","query","orderBy","limit","idField","messages","formValue","setFormValue","expoPushToken","setExpoPushToken","notification","setNotification","notificationListener","responseListener","dummy","registerForPushNotificationsAsync","then","token","current","addNotificationReceivedListener","addNotificationResponseReceivedListener","response","console","log","removeNotificationSubscription","sendMessage","e","schedulePushNotification","preventDefault","add","text","createdAt","firebase","FieldValue","serverTimestamp","catch","ref","scrollView","scrollToEnd","animated","map","msg","id","uri","Platform","OS","scheduleNotificationAsync","content","title","body","data","trigger","seconds","Constants","isDevice","Permissions","getAsync","NOTIFICATIONS","existingStatus","status","finalStatus","askAsync","alert","getExpoPushTokenAsync","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor"],"mappings":"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","sourcesContent":["import React, { FunctionComponent as Component, useEffect, useRef, useState } from \"react\"\nimport { observer } from \"mobx-react-lite\"\nimport { Image, ImageStyle, Keyboard, KeyboardAvoidingView, Platform, SafeAreaView, ScrollView, TextInput, TextStyle, View, ViewStyle } from \"react-native\"\nimport { Button, Screen, Text } from \"../components\"\nimport { firestore } from '../app'\nimport { color, spacing, typography } from \"../theme\"\nimport { useCollectionData } from 'react-firebase-hooks/firestore'\nimport firebase from \"firebase\"\nimport { StatusBar } from \"expo-status-bar\"\nimport * as Notifications from 'expo-notifications';\nimport Constants from 'expo-constants';\nimport * as Permissions from 'expo-permissions';\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: false,\n    shouldSetBadge: false,\n  }),\n});\n\nconst ROOT: ViewStyle = {\n  flex: 1,\n}\n\nconst MESSAGES_CONTAINER: ViewStyle = {\n  flex: 1,\n  flexDirection: \"column-reverse\",\n}\n\nconst MESSAGE: ViewStyle = {\n  borderBottomWidth: 1,\n  borderColor: color.palette.lightGrey,\n  padding: spacing[4],\n  flexDirection: \"row\",\n  alignItems: \"center\"\n}\n\nconst TEXT: TextStyle = {\n  color: color.palette.black,\n  fontFamily: typography.primary,\n  marginLeft: spacing[4]\n}\n\nconst BUTTON_TEXT: TextStyle = {\n  color: color.palette.black,\n  fontFamily: typography.primary,\n}\n\nconst TEXT_INPUT: ViewStyle = {\n  paddingVertical: spacing[5],\n  paddingHorizontal: spacing[5],\n  backgroundColor: color.palette.lighterGrey,\n  ...BUTTON_TEXT\n}\n\nconst PROFILE_IMAGE: ImageStyle = {\n  marginTop: 7,\n  height: 39,\n  width: 39,\n  borderRadius: 50\n}\n\ninterface Message {\n  id: string,\n  text: string,\n}\n\nexport const ChatScreen: Component = observer(function ChatScreen() {\n  const messagesRef = firestore.collection('messages')\n  const query = messagesRef.orderBy('createdAt', 'desc').limit(25)\n  const [messages] = useCollectionData<Message>(query, { idField: 'id' })\n  const [formValue, setFormValue] = useState('')\n  const [expoPushToken, setExpoPushToken] = useState('');\n  const [notification, setNotification] = useState(false);\n  const notificationListener = useRef();\n  const responseListener = useRef();\n  const dummy = useRef();\n\n  useEffect(() => {\n    registerForPushNotificationsAsync().then(token => setExpoPushToken(token));\n\n    notificationListener.current = Notifications.addNotificationReceivedListener(notification => {\n      setNotification(notification);\n    });\n\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\n      console.log(response);\n    });\n\n    return () => {\n      Notifications.removeNotificationSubscription(notificationListener);\n      Notifications.removeNotificationSubscription(responseListener);\n    };\n  }, []);\n\n  const sendMessage = async (e) => {\n    await schedulePushNotification();\n    e.preventDefault()\n\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n    }).catch((e) => {\n      console.log(e)\n    })\n\n    setFormValue('')\n  }\n\n  return (\n    <SafeAreaView style={ROOT}>\n      <ScrollView ref={ref => {scrollView = ref}} onContentSizeChange={() => scrollView.scrollToEnd({animated: true})}>\n        <View style={MESSAGES_CONTAINER}>\n          {messages?.map(msg => \n            <View style={MESSAGE} key={msg.id}>\n              <Image style={PROFILE_IMAGE} source={{ uri: \"https://ui-avatars.com/api/?name=Isaac+Weber\" }} />\n              <Text text={msg.text} style={TEXT} />\n            </View>\n          )}\n        </View>\n      </ScrollView>\n      <KeyboardAvoidingView behavior={Platform.OS === 'ios' ? 'padding' : 'height'}>\n        <TextInput\n          placeholderTextColor={color.palette.lightGrey}\n          style={TEXT_INPUT}\n          onChangeText={text => setFormValue(text)}\n          value={formValue}\n          placeholder=\"Message\"\n          autoCapitalize=\"none\"\n          onSubmitEditing={sendMessage}\n          returnKeyType=\"send\"\n        />\n      </KeyboardAvoidingView>\n      <StatusBar style=\"dark\" />\n    </SafeAreaView>\n  )\n})\n\nasync function schedulePushNotification() {\n  await Notifications.scheduleNotificationAsync({\n    content: {\n      title: \"You've got mail! ðŸ“¬\",\n      body: 'Here is the notification body',\n      data: { data: 'goes here' },\n    },\n    trigger: { seconds: 1 },\n  });\n}\n\nasync function registerForPushNotificationsAsync() {\n  let token;\n  if (Constants.isDevice) {\n    const { status: existingStatus } = await Permissions.getAsync(Permissions.NOTIFICATIONS);\n    let finalStatus = existingStatus;\n    if (existingStatus !== 'granted') {\n      const { status } = await Permissions.askAsync(Permissions.NOTIFICATIONS);\n      finalStatus = status;\n    }\n    if (finalStatus !== 'granted') {\n      alert('Failed to get push token for push notification!');\n      return;\n    }\n    token = (await Notifications.getExpoPushTokenAsync()).data;\n    console.log(token);\n  } else {\n    alert('Must use physical device for Push Notifications');\n  }\n\n  if (Platform.OS === 'android') {\n    Notifications.setNotificationChannelAsync('default', {\n      name: 'default',\n      importance: Notifications.AndroidImportance.MAX,\n      vibrationPattern: [0, 250, 250, 250],\n      lightColor: '#FF231F7C',\n    });\n  }\n\n  return token;\n}\n"]},"metadata":{},"sourceType":"script"}